{"version":3,"sources":["firebase.js","Components/firebase-access.jsx","Components/pages/Create.jsx","Components/quiz/host/Quiz.js","Components/pages/Host.jsx","Components/quiz/play/Quiz.jsx","Components/pages/Play.jsx","Components/authenticate/providers/UserProvider.jsx","Components/pages/Home.jsx","App.jsx","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","firestore","setUpRoom","GoogleAuthProvider","NumOfSymbols","Rounds","userID","password","startingMoney","roomRef","collection","doc","set","day_index","phase","starting_money","roomID","id","initSymbols","then","symbolsL","initDates","datesD","update","symbols","dates","initializeQuiz","a","where","get","Stocks","IPOyearMax","today","Date","year","getFullYear","forEach","Stock","data","IPOyear","yearDiff","maximum_period","Math","floor","random_period","random","startDate","endDate","start","end","rand_startDate","curr_date","i","push","toISOString","substring","setMonth","getMonth","Industry","Sector","formData","FormData","append","fetch","method","mode","body","response","json","symbolJson","hasOwnProperty","console","log","IndustryInfo","numOfIndustries","cutoff","orderBy","limit","Symbol","SectorInfo","numOfSectors","StockInfo","numOfStocks","NumOfStocks","roomId","periodLen","endDates","JSON","stringify","Create","props","state","pagetype","gameId","createGameWrapper","bind","_gameId","this","setState","className","onClick","to","Component","Host","handleChangeSelect","event","target","name","value","handleChange","questionNum","authenticated","listening","users","userExists","updateUsers","joinGame","updatePhase","initGameListener","restartGame","quitGame","endGame","userId","array","item","index","gameupdate","toggleHeader","updateGame","nickname","gameInfo","investments","personal_value","money_left","gains","losses","that","snapshot","docs","user","newUser","concat","gameRef","gameData","exists","addDummyUser","onSnapshot","date_index","FormControl","TextField","label","onChange","type","Button","variant","map","startGame","key","advanceQuestion","Play","chartURLs","technicalIndicatorUrls","net_worth","cash","curShares","prices","addUser","gameDoc","curQuestionNum","curPhase","uniqueUserId","userRef","game","playerKey","recentGameId","recentGame","isRedirected","gametype","UserContext","createContext","Home","Helmet","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yRAeMA,G,YAAOC,IAASC,cAXC,CACrBC,OAAQ,0CACRC,WAAY,0CACZC,YAAa,iDACbC,UAAW,0BACXC,cAAe,sCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,kBAKXC,EAAOV,IAASU,OAEhBC,GADYX,IAASY,YAChBZ,IAASY,aCePC,GDZI,IAAIb,IAASU,KAAKI,mBCYV,SAACC,EAAaC,EAAOC,EAAOC,GAAoC,IAA3BC,EAA0B,uDAAV,IACpEC,EAAUT,EAAGU,WAAW,SAASC,MACvCF,EAAQG,IAAI,CACRC,UAAW,EACXC,MAAO,UACPP,SAAUA,EACVQ,eAAgBP,IAEpB,IAAMQ,EAASP,EAAQQ,GAWvB,OAVAC,EAAYlB,EAAG,KAAK,KAAKI,GAAce,MAAK,SAACC,GACzCC,EAAUrB,EAAGoB,EAASf,GAAQc,MAAK,SAACG,GAChCb,EAAQc,OAAO,CACXC,QAASJ,EACTK,MAAOH,EAAM,QAEjBI,EAAeN,EAASJ,EAAOM,EAAM,OAAWA,EAAM,aAIvDN,IAmBJ,IAAMK,EAAS,uCAAG,WAAOG,EAASnB,GAAhB,yCAAAsB,EAAA,sEACH3B,EAAGU,WAAW,eAAeC,IAAI,SAASD,WAAW,UAClEkB,MAAM,SAAS,KAAKJ,GAASK,MAFb,OAsBrB,IArBIC,EADiB,OAGjBC,EAAa,EACbC,EAAQ,IAAIC,KACZC,EAAOF,EAAMG,cACjBL,EAAOM,SAAQ,SAASC,GAChBN,EAAaM,EAAMC,OAAOC,UAC1BR,EAAaM,EAAMC,OAAOC,YAKZ,EAClBC,EAAWN,GAAQH,EAAW,GAC9BU,EAAiBC,KAAKC,OAAmB,GAAXH,EAFZ,GAEiDnC,GACnEuC,EAAiBF,KAAKC,MAAOD,KAAKG,UAAaJ,EAH7B,MAIlBK,EAAY,IAAIb,KAAKF,EAAW,EAAE,EAAE,GACpCgB,EAAW,IAAId,KAAKF,EAAW,EAAE,EAAEa,EAAc,GAxBrCI,EAyBiBF,EAzBVG,EAyBoBF,EAAvCG,EAxBO,IAAIjB,MAAMe,EAAQN,KAAKG,UAAYI,EAAMD,IAyBhDvB,EAAQ,GACR0B,EAAYD,EACRE,EAAI,EAAGA,EAAI/C,EAAQ+C,IACvB3B,EAAM4B,KAAKF,EAAUG,cAAcC,UAAU,EAAG,KAChDJ,EAAY,IAAIlB,KAAKkB,EAAUK,SAASL,EAAUM,WAAWb,IAxB5C,OA0BftB,EAAQ,CACV,MAAUG,EACV,OAAUmB,GA5BO,kBA8BdtB,GA9Bc,kCANzB,IAAoB0B,EAAOC,IAMF,OAAH,wDAiCT/B,EAAW,uCAAG,WAAMwC,EAASC,EAAOvD,GAAtB,uCAAAuB,EAAA,yDACnBH,EAAU,GACA,OAAXmC,GAAgC,OAAbD,EAFC,wBAIfE,EAAW,IAAIC,UACVC,OAAO,WAAWJ,GAC3BE,EAASE,OAAO,SAASH,GACzBC,EAASE,OAAO,eAAe1D,GAPZ,kBASM2D,MAAM,oCAAqC,CAC5DC,OAAQ,OACRC,KAAM,OACNC,KAAMN,IAZK,cASXO,EATW,iBAcQA,EAASC,OAdjB,aAcXC,EAdW,QAeAC,eAAe,SAff,wBAgBXC,QAAQC,IAAI,6BAhBD,kBAiBJhD,GAjBI,QAmBfA,EAAU6C,EAAU,QAnBL,kDAsBfE,QAAQC,IAAI,2BAtBG,mCA0BF,OAAbd,EA1Be,kCA4BO1D,EAAGU,WAAW,eAAeC,IAAI,YAAYkB,MA5BpD,eA4Bf4C,EA5Be,OA6BfC,EAAiBD,EAAanC,OAAOoB,SAASA,GAC9CiB,EAASjC,KAAKC,MAAOD,KAAKG,UAAa6B,EAAkBtE,GAAeA,GA9BzD,UA+BIJ,EAAGU,WAAW,eAAeC,IAAI,SAASD,WAAW,UACvEkB,MAAM,WAAW,KAAK8B,GACtB9B,MAAM,cAAc,KAAM+C,GAC1BC,QAAQ,eAAeC,MAAMzE,GAAcyB,MAlC7B,eAmCRO,SAAQ,SAASzB,GACxBa,EAAQ6B,KAAK1C,EAAI2B,OAAOwC,WApCT,2BAwCJ,OAAXnB,EAxCe,kCA0CK3D,EAAGU,WAAW,eAAeC,IAAI,UAAUkB,MA1ChD,eA0CfkD,EA1Ce,OA2CfC,EAAcD,EAAWzC,OAAOqB,OAAOA,GACvCgB,EAASjC,KAAKC,MAAOD,KAAKG,UAAamC,EAAe5E,GAAeA,GA5CtD,UA6CCJ,EAAGU,WAAW,eAAeC,IAAI,SAASD,WAAW,UACpEkB,MAAM,SAAS,KAAK+B,GACpB/B,MAAM,YAAY,KAAM+C,GACxBC,QAAQ,aAAaC,MAAMzE,GAAcyB,MAhD3B,eAiDXO,SAAQ,SAASzB,GACrBa,EAAQ6B,KAAK1C,EAAI2B,OAAOwC,WAlDT,yCAwDI9E,EAAGU,WAAW,eAAeC,IAAI,SAASkB,MAxD9C,eAwDfoD,EAxDe,OAyDfC,EAAcD,EAAU3C,OAAO6C,YAAc,EAC7CR,EAASjC,KAAKC,MAAOD,KAAKG,UAAaqC,EAAc9E,GAAeA,GA1DrD,UA2DAJ,EAAGU,WAAW,eAAeC,IAAI,SAASD,WAAW,UACnEkB,MAAM,YAAY,KAAM+C,GACxBC,QAAQ,aAAaC,MAAMzE,GAAcyB,MA7D3B,eA8DZO,SAAQ,SAASC,GACpBb,EAAQ6B,KAAKhB,EAAMC,OAAOwC,WA/DX,iCAmEhBtD,GAnEgB,0DAAH,0DAsEXE,EAAc,uCAAG,WAAOF,EAAS4D,EAAQC,EAAWC,GAAnC,eAAA3D,EAAA,6DACtBiC,EAAW,IAAIC,UACVC,OAAO,SAASyB,KAAKC,UAAUhE,IACxCoC,EAASE,OAAO,SAASsB,GACzBxB,EAASE,OAAO,WAAWyB,KAAKC,UAAUF,IAJhB,kBAMhBvB,MAAM,mCAAoC,CAC5CC,OAAQ,OACRC,KAAM,OACNC,KAAMN,IATY,uDAatBW,QAAQC,IAAI,kBAbU,eAe1BZ,EAASE,OAAO,YAAYuB,GAfF,oBAiBhBtB,MAAM,wCAAyC,CACjDC,OAAQ,OACRC,KAAM,OACNC,KAAMN,IApBY,2DAwBtBW,QAAQC,IAAI,kBAxBU,iEAAH,4D,ICzFZiB,E,kDAvEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,SAAU,cACVC,OAAQ,IAEZ,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBANV,E,6OAsCK7F,EAAUF,EAAG,EAAE,EAAE,KAAK,I,OAAtCgG,E,OACJC,KAAKC,SAAS,CACVN,SAAU,UACVC,OAAQG,I,qIAIN,IAAD,OACLzB,QAAQC,IAAI,iBADP,MAEqByB,KAAKN,MAAxBC,EAFF,EAEEA,SAASC,EAFX,EAEWA,OAGhB,OAFAtB,QAAQC,IAAIoB,GACZrB,QAAQC,IAAIqB,GAGR,yBAAKM,UAAU,wBACG,gBAAbP,GACG,4BAAQQ,QAAO,sBAAE,sBAAAzE,EAAA,sEAAkB,EAAKmE,oBAAvB,oFAAjB,kBAGU,YAAbF,GACG,6BACI,oDACC,IACD,0BAAMO,UAAU,gBAAgBN,GAC/B,IACD,kBAAC,IAAD,CAAMQ,GAAG,SAAT,+C,GAhEHC,a,mCCZFA,Y,ICmQJC,E,kDAnOX,WAAYb,GAAQ,IAAD,8BACf,cAAMA,IA2BVc,mBAAqB,SAACC,GAClB,EAAKP,SAAL,eAAgBO,EAAMC,OAAOC,KAAMF,EAAMC,OAAOE,SA7BjC,EAgCnBC,aAAe,SAAAF,GAAI,OAAI,SAACF,GACpB,EAAKP,SAAL,eACKS,EAAMF,EAAMC,OAAOE,UAhCxB,EAAKjB,MAAQ,CACT7E,MAAO,aACPgG,YAAa,EACbjB,OAAQ,KACRtF,SAAU,GACVwG,cAAe,KACfC,UAAW,KACXC,MAAO,IAEX,EAAKC,WAAa,EAAKA,WAAWnB,KAAhB,gBAClB,EAAKoB,YAAc,EAAKA,YAAYpB,KAAjB,gBACnB,EAAKqB,SAAW,EAAKA,SAASrB,KAAd,gBAChB,EAAKsB,YAAc,EAAKA,YAAYtB,KAAjB,gBACnB,EAAKuB,iBAAmB,EAAKA,iBAAiBvB,KAAtB,gBACxB,EAAKwB,YAAc,EAAKA,YAAYxB,KAAjB,gBACnB,EAAKyB,SAAW,EAAKA,SAASzB,KAAd,gBAChB,EAAK0B,QAAU,EAAKA,QAAQ1B,KAAb,gBAlBA,E,gEAsBEE,KAAKN,MAAfE,S,+EAgBA6B,GAIP,OAHAzB,KAAKN,MAAMsB,MAAMU,MAAMvF,SAAQ,SAASwF,EAAKC,GACzC,GAAID,EAAK3G,IAAMyG,EAAQ,OAAO,MAE3B,I,kCAGCI,GAAa,IACdjC,EAAUI,KAAKN,MAAfE,OACPI,KAAKC,SAAS,CACVpF,MAAOgH,IAEX9H,EAAGU,WAAW,SAASC,IAAIkF,GAAQtE,OAAO,CACtCT,MAAOgH,M,wEASY7B,KAAKP,MAArBqC,aACP9B,KAAK+B,WAAW,CAAClH,MAAM,S,gCAIvBmF,KAAK+B,WAAW,CAAClH,MAAM,mB,mCAGdmH,GAAW,IACbpC,EAAUI,KAAKN,MAAfE,OAIDqC,EAAW,CACbD,SAAUA,EACVE,YAAa,GACbC,gBAAiB,EACjBC,YAAa,EACbC,MAAO,EACPC,OAAQ,GATIvI,EAAGU,WAAW,SAASC,IAAIkF,GACnBnF,WAAW,SAASC,IAAIsH,GAUxCrH,IAAIsH,K,oCAGD,IAAD,EACgBjC,KAAKN,MAAfE,GADN,EACHtF,SADG,EACMsF,QACV2C,EAAOvC,KACCjG,EAAGU,WAAW,SAASC,IAAIkF,GACjCnF,WAAW,SAASmB,MAAMV,MAAK,SAACsH,GACpCA,EAASC,KAAKtG,SAAQ,SAAAuG,GAClB,IAAKH,EAAKtB,WAAWyB,EAAK1H,IAAK,CAC3BsD,QAAQC,IAAI,mBACZ,IAAIoE,EAAUD,EAAKrG,OACnBkG,EAAKtC,SAAS,CACVe,MAAOuB,EAAK7C,MAAMsB,MAAM4B,OAAO,CAACD,e,iCAOxC,IAAD,EACmB3C,KAAKN,MAAxBpF,EADA,EACAA,SAASsF,EADT,EACSA,OACV2C,EAAOvC,KACT6C,EAAU9I,EAAGU,WAAW,SAASC,IAAIkF,GACzCiD,EAAQjH,MAAMV,MAAK,SAAS4H,GACxB,GAAIA,EAASC,OAAQ,CACjB,IAAId,EAAWa,EAASzG,OACpB4F,EAAS3H,WAAaA,GAA+B,YAAnB2H,EAASpH,OAC3C0H,EAAKtC,SAAS,CACVa,cAAe,MACfjG,MAAO,eAGX0H,EAAKS,aAAa,cAClBT,EAAKrB,cACLqB,EAAKlB,mBACLwB,EAAQvH,OAAO,CACXT,MAAO,gBAGXyD,QAAQC,IAAI,uBAGhBD,QAAQC,IAAI,QAAUqB,EAAS,wB,yCAKvB,IACTA,EAAUI,KAAKN,MAAfE,OACHiD,EAAU9I,EAAGU,WAAW,SAASC,IAAIkF,GACnC2C,EAAOvC,KAEb6C,EAAQI,YAAW,SAASH,GACxBP,EAAKrB,mB,kCAKIlB,KACRoB,YAAY,c,wCAGF,IACRxB,EAAUI,KAAKN,MAAfE,OAEPI,KAAKC,SAAS,CACVY,YAFSb,KAESN,MAAMmB,YAAc,IAE1C9G,EAAGU,WAAW,SAASC,IAAIkF,GAAQtE,OAAO,CACtC4H,WALSlD,KAKQN,MAAMmB,gB,+BAarB,IAAD,SACgEb,KAAKN,MAAnEE,EADF,EACEA,OAAQtF,EADV,EACUA,SAAUO,EADpB,EACoBA,MAAOiG,EAD3B,EAC2BA,cAAeE,EAD1C,EAC0CA,MAAOH,EADjD,EACiDA,YAE1Cb,KAAK+B,WACJ/B,KAAKsB,YACTtB,KAAKwB,QACJxB,KAAKuB,SAGf,GAAsB,OAAlBT,EACA,OACI,yBAAKZ,UAAU,4BACX,kBAACiD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWC,MAAM,WAAW3C,KAAK,UAAUC,MAAOf,EACvC0D,SAAUtD,KAAKY,aAAa,aAE3C,kBAACuC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWC,MAAM,WAAWE,KAAK,WAAW7C,KAAK,WAAWC,MAAOrG,EACxDgJ,SAAUtD,KAAKY,aAAa,eAE3C,kBAAC4C,EAAA,EAAD,CAAQrD,QAAS,kBAAM,EAAKgB,YAAYsC,QAAQ,aAAhD,SAGL,GAAsB,QAAlB3C,EAAyB,CAChC,GAAc,eAAVjG,EACA,OACI,yBAAKqF,UAAU,4BACX,2CACA,wBAAIlF,GAAG,aACFgG,EAAM0C,KAAI,SAAAhB,GAAI,OACX,4BAAMA,EAAKV,cAInB,4BAAQ7B,QAAS,kBAAM,EAAKwD,cAA5B,sBAGL,GAAc,aAAV9I,EACP,OACI,yBAAKqF,UAAU,4BACX,oDACC,IACD,0BAAMA,UAAU,gBAAgBW,GAChC,2CACA,wBAAI7F,GAAG,aACFgG,EAAM0C,KAAI,SAAAhB,GAAI,OACX,wBAAIkB,IAAKlB,EAAK1H,IAAK0H,EAAKV,cAIhC,4BAAQ7B,QAAS,kBAAM,EAAK0D,oBAA5B,uB,GAxNLxD,aC5BAA,Y,UCyLJyD,E,kDApKX,WAAarE,GAAQ,IAAD,8BAChB,cAAMA,IA0BVc,mBAAqB,SAACC,GAClB,EAAKP,SAAL,eAAiBO,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,SA5BlC,EA+BpBC,aAAe,SAAAF,GAAI,OAAI,SAACF,GACpB,EAAKP,SAAL,eACKS,EAAOF,EAAMC,OAAOE,UA/BzB,EAAKjB,MAAQ,CAETE,OAAQ,KACRtF,SAAU,GACVmH,OAAQ,GACRO,SAAU,GAGVnH,MAAO,aACPgG,YAAa,EACbkD,UAAW,GACXC,uBAAwB,GACxBC,UAAW,EACXC,KAAM,GACNC,UAAW,GACXC,OAAQ,IAEZ,EAAKC,QAAU,EAAKA,QAAQvE,KAAb,gBACf,EAAKqB,SAAW,EAAKA,SAASrB,KAAd,gBAChB,EAAKuB,iBAAmB,EAAKA,iBAAiBvB,KAAtB,gBArBR,E,4GA+ChB,IAAMyC,EAAOvC,KADE,EAE6BA,KAAKN,MAA1CmB,EAFQ,EAERA,YAAYjB,EAFJ,EAEIA,OAAO/E,EAFX,EAEWA,MAFX,EAEiBmH,SAChBjI,EAAGU,WAAW,SAASC,IAAIkF,GACnCqD,YAAW,SAASqB,GACxB,IAAMxB,EAAWwB,EAAQjI,OACnBkI,EAAiBzB,EAASlI,UAC1B4J,EAAW1B,EAASjI,MAC1ByD,QAAQC,IAAIuE,GACRjC,GAAe0D,GACfhC,EAAKtC,SAAS,CACVY,YAAa0D,EAAiB,IAIlC1J,IAAU2J,GACVjC,EAAKtC,SAAS,CACVpF,MAAO2J,S,iCAOX,IAAD,EAC4BxE,KAAKN,MAAjCE,EADA,EACAA,OAAOtF,EADP,EACOA,SAAS0H,EADhB,EACgBA,SACjBO,EAAOvC,KACGjG,EAAGU,WAAW,SAASC,IAAIkF,GACnChE,MAAMV,MAAK,SAAS4H,GACxB,GAAIA,EAASC,OAAQ,CACjB,IAAId,EAAWa,EAASzG,OACxB,GAAI4F,EAAS3H,WAAaA,GAA+B,eAAnB2H,EAASpH,MAAwB,CACnE,IAAI4J,EAAelC,EAAK8B,QAAQrC,EAASC,EAASnH,gBAClDyH,EAAKtC,SAAS,CACVpF,MAAO,aACP4G,OAAQgD,EACRR,UAAWhC,EAASnH,eACpBoJ,KAAMjC,EAASnH,iBAEnByH,EAAKlB,wBAEEY,EAAS3H,WAAaA,EAC7BgE,QAAQC,IAAI,6BACc,eAAnB0D,EAASpH,MAChByD,QAAQC,IAAI,sBAEZD,QAAQC,IAAI,4BAGhBD,QAAQC,IAAI,QAAUqB,EAAS,wB,8BAKnC9E,GAAiB,IAAD,EACMkF,KAAKN,MAAxBE,EADa,EACbA,OAAOoC,EADM,EACNA,SAER0C,EADU3K,EAAGU,WAAW,SAASC,IAAIkF,GACnBnF,WAAW,SAASC,MACtC+G,EAASiD,EAAQ1J,GAEjBiH,EAAW,CACbD,SAAUA,EACVE,YAAa,GACb+B,UAAWnJ,EACXsH,WAAYtH,EACZuH,MAAO,EACPC,OAAQ,GAIZ,OADAoC,EAAQ/J,IAAIsH,GACLR,I,+BAGA,IAAD,SAC4GzB,KAAKN,MAA3G7E,GADN,EACC8J,KADD,EACM9J,OAAMP,EADZ,EACYA,SAAS0H,EADrB,EACqBA,SAAmBnB,GADxC,EAC8B+D,UAD9B,EACwC/D,aAAYjB,EADpD,EACoDA,OADpD,EAC2DiF,aAD3D,EACwEC,WADxE,EACmFC,aADnF,EACgGC,SAEtG,OADA1G,QAAQC,IAAIsC,GACE,eAAVhG,EAEI,yBAAKqF,UAAU,4BACX,6BACI,kBAACiD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWC,MAAM,WAAW3C,KAAK,WAAWC,MAAOqB,EACxCsB,SAAUtD,KAAKY,aAAa,eAE3C,kBAACuC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWC,MAAM,WAAW3C,KAAK,UAAUC,MAAOf,EAAQ0D,SAAUtD,KAAKY,aAAa,aAE1F,kBAACuC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWC,MAAM,WAAWE,KAAK,WAAW7C,KAAK,WAAWC,MAAOrG,EACxDgJ,SAAUtD,KAAKY,aAAa,eAE3C,kBAAC4C,EAAA,EAAD,CAAQrD,QAAS,kBAAM,EAAKgB,YAAYsC,QAAQ,aAAhD,UAIK,eAAV5I,EAEH,6BACI,gFAGS,aAAVA,EAEH,6BACI,oDACC,IACD,0BAAMqF,UAAU,gBAAgBW,GAChC,uEACA,yCACA,0CACA,gDATL,M,GA/JIR,aCVN4E,EAAcC,wBAAc,CAAExC,KAAM,OCyClCyC,GDxCY9E,Y,kDCMvB,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAM,GAFI,E,qDAKf,OACI,kBAAC,WAAD,KACI,kBAAC0F,EAAA,EAAD,KAAQ,2DACR,yBAAKpK,GAAG,QACJ,iCACI,8BACA,0CACA,yBAAKkF,UAAU,yBACX,4BACI,4BAAI,kBAAC,IAAD,CAAME,GAAG,SAAT,WAGZ,yBAAKF,UAAU,yBACX,2BAAG,kBAAC,IAAD,CAAME,GAAG,SAAT,iBAEP,yBAAKF,UAAU,2BACX,2BAAG,kBAAC,IAAD,CAAME,GAAG,WAAT,mBAEP,yBAAKF,UAAU,kBACX,kBAAC,IAAD,CAAME,GAAG,gBAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,gBAAT,kB,GA1BTC,cCsBJgF,E,kDApBb,WAAY5F,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAM,GAFM,E,qDAKjB,OACE,kBAAC,IAAD,KACE,yBAAKQ,UAAU,OACb,yBAAKlF,GAAG,WACN,kBAAC,IAAD,CAAOsK,OAAK,EAACC,KAAK,QAAQC,OAAQ,kBAAM,kBAAC,EAAD,SACxC,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,QAAQC,OAAQ,kBAAM,kBAAC,EAAD,SACxC,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,UAAUC,OAAQ,kBAAM,kBAAC,EAAD,SAC1C,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,EAAD,gB,GAb9BnF,aCEEoF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlL,MAAK,SAAAmL,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlI,QAAQkI,MAAMA,EAAMC,c","file":"static/js/main.37316dac.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyArVyBRB-XMiStAmjP5mCV2v2PmScbEpi8\",\r\n  authDomain: \"integrity-step-capstone.firebaseapp.com\",\r\n  databaseURL: \"https://integrity-step-capstone.firebaseio.com\",\r\n  projectId: \"integrity-step-capstone\",\r\n  storageBucket: \"integrity-step-capstone.appspot.com\",\r\n  messagingSenderId: \"359578935158\",\r\n  appId: \"1:359578935158:web:89d46122b0609b4a95a457\",\r\n  measurementId: \"G-GMNRGZQ858\"\r\n};\r\n\r\nconst fire = firebase.initializeApp(firebaseConfig);\r\n\r\nconst auth = firebase.auth();\r\nconst firestore = firebase.firestore();\r\nconst db = firebase.firestore();\r\n\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nconst signInWithGoogle = () => {\r\n  auth.signInWithPopup(provider);\r\n};\r\n\r\nexport {db, fire, auth, firestore, signInWithGoogle};\r\n\r\nexport const getUserID = () =>{\r\n  var user = firebase.auth().currentUser;\r\n  if (user != null) {\r\n    return user.uid;\r\n  } else {\r\n    throw \"Null User\"\r\n  }\r\n};\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport {db} from \"../firebase\";\r\n\r\n\r\nexport const getStartingMoney = async (roomID) => {\r\n    const roomData = await getRoomData(roomID);\r\n    return roomData.starting_money;\r\n}\r\n\r\nexport const addUser = async (roomID,nickname,numDays,numSymbols) => {\r\n    const roomRef = getRoomRef(roomID);\r\n    const userRef = roomRef.collection('users').doc();\r\n    const userId = userRef.id;\r\n    const empArray = Array.from(Array(numSymbols),()=>0);\r\n    const starting_money = await getStartingMoney(roomID);\r\n\r\n    const gameInfo = {\r\n        nickname: nickname,\r\n        net_worth: starting_money,\r\n        money_left: starting_money,\r\n        curShares: empArray,\r\n    }\r\n    userRef.set(gameInfo);\r\n\r\n    for(var i_day = 0; i_day < numDays; i_day++) {\r\n        userRef.collection('investments').doc(i_day).set({\r\n            change: empArray,\r\n        });\r\n    }\r\n    return userId;\r\n}\r\n\r\nexport const setUpRoom = (NumOfSymbols,Rounds,userID,password,startingMoney = 10000) => {\r\n    const roomRef = db.collection('Rooms').doc();\r\n    roomRef.set({\r\n        day_index: 0,\r\n        phase: 'no-host',\r\n        password: password,\r\n        starting_money: startingMoney,\r\n    });\r\n    const roomID = roomRef.id;\r\n    initSymbols(db,null,null,NumOfSymbols).then((symbolsL) => {\r\n        initDates(db,symbolsL,Rounds).then((datesD)=> {\r\n            roomRef.update({\r\n                symbols: symbolsL,\r\n                dates: datesD[\"dates\"],\r\n            });\r\n            initializeQuiz(symbolsL,roomID,datesD[\"period\"],datesD[\"dates\"]);\r\n\r\n        });\r\n    });\r\n    return roomID;\r\n}\r\n\r\nexport const getChartUrl = async (roomId,symbol,endDate) =>{\r\n    let imagesData = await db.collection('Rooms').doc(roomId).collection(symbol).doc('images').get().data();\r\n    return imagesData[\"Stockpublic_image_url\"][endDate];\r\n}\r\n\r\nexport const getTechnicalUrl = async (roomId, symbol, endDate) => {\r\n    let imagesData = await db.collection('Rooms').doc(roomId).collection(symbol).doc('images').get().data();\r\n    return imagesData[\"Stockpublic_image_url\"][endDate]\r\n}\r\n\r\nfunction randomDate(start, end) {\r\n    var date = new Date(+start + Math.random() * (end - start));\r\n    return date;\r\n}\r\n\r\n// Minimum Period is 1Month\r\nexport const initDates = async (symbols, Rounds) => {\r\n    let Stocks= await db.collection(\"Ticker-Info\").doc(\"Stock\").collection(\"Stocks\")\r\n        .where(\"Symbol\",\"in\",symbols).get()\r\n    let IPOyearMax = 0;\r\n    let today = new Date();\r\n    let year = today.getFullYear();\r\n    Stocks.forEach(function(Stock){\r\n        if (IPOyearMax < Stock.data().IPOyear){\r\n            IPOyearMax = Stock.data().IPOyear;\r\n        }\r\n    });\r\n\r\n    // No more than 7 rounds(Periods are measured in months)\r\n    let min_window_size = 3;\r\n    let yearDiff = year - (IPOyearMax+1);\r\n    let maximum_period = Math.floor(((yearDiff * 12)  - min_window_size) / Rounds);\r\n    let random_period =  Math.floor((Math.random()  * (maximum_period - min_window_size))+min_window_size);\r\n    let startDate = new Date(IPOyearMax+1,1,1);\r\n    let endDate =  new Date(IPOyearMax+1,1+random_period,1);\r\n    let rand_startDate =  randomDate(startDate,endDate);\r\n    let dates = [];\r\n    let curr_date = rand_startDate;\r\n    for(var i = 0; i < Rounds; i++) {\r\n        dates.push(curr_date.toISOString().substring(0, 10));\r\n        curr_date = new Date(curr_date.setMonth(curr_date.getMonth()+random_period));\r\n    }\r\n    const datesD ={\r\n        \"dates\" : dates,\r\n        \"period\": random_period\r\n    }\r\n    return datesD\r\n}\r\n\r\nexport const initSymbols = async(Industry,Sector,NumOfSymbols) =>{\r\n    let symbols = []\r\n    if(Sector !== null && Industry !== null){\r\n\r\n        let formData = new FormData();\r\n        formData.append('Industry',Industry);\r\n        formData.append('Sector',Sector)\r\n        formData.append('NumOfSymbols',NumOfSymbols)\r\n        try{\r\n            let response = await fetch('http://localhost:8080/get-symbols', {\r\n                method: 'POST',\r\n                mode: 'cors',\r\n                body: formData\r\n            })\r\n            let symbolJson = await response.json()\r\n            if (symbolJson.hasOwnProperty(\"Error\")){\r\n                console.log(\"No Symbols for your query\")\r\n                return symbols\r\n            }\r\n            symbols = symbolJson['symbols']\r\n        }\r\n        catch(error){\r\n            console.log(\"Error with Query: \" + error)\r\n        }\r\n\r\n    }\r\n    else if(Industry !== null){\r\n\r\n        let IndustryInfo =  await db.collection(\"Ticker-Info\").doc(\"Industry\").get();\r\n        let numOfIndustries= IndustryInfo.data().Industry[Industry];\r\n        let cutoff = Math.floor((Math.random()  * (numOfIndustries - NumOfSymbols))+NumOfSymbols);\r\n        let Industries = await db.collection(\"Ticker-Info\").doc(\"Stock\").collection(\"Stocks\")\r\n            .where(\"Industry\",\"==\",Industry)\r\n            .where(\"IndustryPos\",\"<=\", cutoff)\r\n            .orderBy(\"IndustryPos\").limit(NumOfSymbols).get()\r\n        Industries.forEach(function(doc){\r\n            symbols.push(doc.data().Symbol)\r\n        })\r\n\r\n    }\r\n    else if(Sector !== null){\r\n\r\n        let SectorInfo =  await db.collection(\"Ticker-Info\").doc(\"Sector\").get();\r\n        let numOfSectors= SectorInfo.data().Sector[Sector];\r\n        let cutoff = Math.floor((Math.random()  * (numOfSectors - NumOfSymbols))+NumOfSymbols);\r\n        let Sectors = await db.collection(\"Ticker-Info\").doc(\"Stock\").collection(\"Stocks\")\r\n            .where(\"Sector\",\"==\",Sector)\r\n            .where(\"SectorPos\",\"<=\", cutoff)\r\n            .orderBy(\"SectorPos\").limit(NumOfSymbols).get()\r\n        Sectors.forEach(function(doc){\r\n            symbols.push(doc.data().Symbol)\r\n        })\r\n\r\n    }\r\n    else{\r\n\r\n        let StockInfo =  await db.collection(\"Ticker-Info\").doc(\"Stock\").get();\r\n        let numOfStocks = StockInfo.data().NumOfStocks - 1;\r\n        let cutoff = Math.floor((Math.random()  * (numOfStocks - NumOfSymbols))+NumOfSymbols);\r\n        let Stocks = await db.collection(\"Ticker-Info\").doc(\"Stock\").collection(\"Stocks\")\r\n            .where(\"RandomPos\",\">=\", cutoff)\r\n            .orderBy(\"RandomPos\").limit(NumOfSymbols).get()\r\n        Stocks.forEach(function(Stock){\r\n            symbols.push(Stock.data().Symbol)\r\n        })\r\n\r\n    }\r\n    return symbols\r\n}\r\n\r\nexport const initializeQuiz = async (symbols, roomId, periodLen, endDates) => {\r\n    var formData = new FormData();\r\n    formData.append('symbol',JSON.stringify(symbols));\r\n    formData.append('RoomId',roomId);\r\n    formData.append('end-date',JSON.stringify(endDates));\r\n    try{\r\n        await fetch('http://localhost:8080/get-prices', {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            body: formData\r\n        })\r\n    }\r\n    catch(err) {\r\n        console.log(\"Error is \" +  err)\r\n    }\r\n    formData.append('periodLen',periodLen)\r\n    try{\r\n        await fetch('http://localhost:8080/get-stock-image', {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            body: formData\r\n        })\r\n    }\r\n    catch(error){\r\n        console.log(\"Error is \" +  error)\r\n    }\r\n}\r\n\r\nexport const getSymbols = async (roomID) =>{\r\n    const roomData = await getRoomData(roomID);\r\n    return roomData.symbols;\r\n}\r\n\r\nexport const getDayIndex = async (roomID) => {\r\n    const roomData = await getRoomData(roomID);\r\n    return roomData.day_index;\r\n}\r\n\r\n// returns current price for all symbols being tracked\r\nexport const getPrices = async (roomID, dayIndex) => {\r\n    const roomData = await getRoomData(roomID);\r\n    const symbolNamesArray = roomData.symbols;\r\n\r\n    var prices = [];\r\n\r\n    // save all current prices in an array\r\n    for (var index = 0; index < symbolNamesArray.length; index++) {\r\n        const currentName = symbolNamesArray[index];\r\n        const symbolPricesDoc = await db.collection('Rooms').doc(roomID).collection(currentName).doc('Prices').get();\r\n        const symbolPricesData = symbolPricesDoc.data();\r\n        const currentPrice = symbolPricesData.prices[dayIndex];\r\n        prices.push(currentPrice);\r\n    }\r\n\r\n    return prices;\r\n}\r\n\r\nexport const getUserData = async (roomID, userID) => {\r\n    await updateNetWorth(roomID,userID);\r\n    return await db.collection('Rooms').doc(roomID).collection('users').doc(userID).get().data();\r\n}\r\n\r\nexport const getUserRef = (roomID, userID) => {\r\n    return db.collection('Rooms').doc(roomID).collection('users').doc(userID);\r\n}\r\n\r\nexport const verifyOk = async (roomID, userID, dayIndex, changeArray, prices) => {\r\n\r\n    var consistentInvestment = true;\r\n    const userRef = getUserRef(roomID, userID);\r\n    const userData = await getUserData(roomID, userID);\r\n\r\n    var curArray = userData.curShares;\r\n    var sum = curArray.map(function(num,idx) {return num + changeArray[idx];});\r\n    consistentInvestment = consistentInvestment && sum.every((e) => e>=0);\r\n\r\n    //check cash ok\r\n    var totalMoney = userData.money_left;\r\n    var moneySpentArr = prices.map(function(price,idx) {totalMoney -= price * changeArray[idx];});\r\n    consistentInvestment = consistentInvestment && totalMoney >= 0;\r\n\r\n    return consistentInvestment;\r\n}\r\n\r\nexport const changeCash = async (roomID, userID, dayIndex, changeArray, prices) => {\r\n    const userRef = getUserRef(roomID, userID);\r\n    const userData = await getUserData(roomID,userID);\r\n    var totalMoney = userData.money_left;\r\n    prices.map(function(num,idx) {totalMoney -= num * changeArray[idx];});\r\n    userRef.update({money_left: totalMoney});\r\n}\r\n\r\nexport const changeShares = async (roomID, userID, dayIndex, changeArray) => {\r\n    const userRef = getUserRef(roomID, userID);\r\n    const investRef = userRef.collection('investments').doc(dayIndex);\r\n    const userData = await getUserData(roomID,userID);\r\n    //update curShares array\r\n    var curArray = userData.curShares;\r\n    var sum = curArray.map(function(num,idx) {return num + changeArray[idx];});\r\n    userRef.update({curShares: sum});\r\n\r\n    //update\r\n    //TODO: current have a separate call for investment. Consider accessing it through userData to save time\r\n    investRef.get().then(function(investDoc) {\r\n        if (investDoc.exists) {\r\n            var investData = investDoc.data();\r\n            var curArray = investData.change;\r\n            var sum = curArray.map(function(num,idx) {\r\n                return num + changeArray[idx];\r\n            });\r\n            investRef.update({\r\n                change: sum,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport const makeInvestment = async (roomID, userID, dayIndex, changeArray) => {\r\n    const prices = await getPrices(roomID, dayIndex);\r\n\r\n    if (!(await verifyOk(roomID,userID,dayIndex,changeArray,prices))) return false;\r\n\r\n    changeCash(roomID,userID,dayIndex,changeArray,prices);\r\n    changeShares(roomID,userID,dayIndex,changeArray);\r\n\r\n    return true;\r\n}\r\n\r\nexport const getShares = async (roomID, userID) => {\r\n    const userData = await getUserData(roomID,userID);\r\n    return userData.currentShares;\r\n}\r\n\r\nexport const getCash = async (roomID, userID) => {\r\n    const userData = await getUserData(roomID,userID);\r\n    return userData.money_left;\r\n}\r\n\r\nexport const getRoomData = async (roomID) => {\r\n    return await db.collection('Rooms').doc(roomID).get().data();\r\n}\r\n\r\nexport const getRoomRef = (roomID) => {\r\n    return db.collection('Rooms').doc(roomID);\r\n}\r\n\r\nexport const getNetWorth = async (roomID, userID) => {\r\n    await updateNetWorth(roomID, userID);\r\n    const userData = await getUserData(roomID, userID);\r\n    return userData.net_worth;\r\n}\r\n\r\n//TODO: this method can be called many times, which leads to latency due to a lot of awaits. See if can pass userData from other methods\r\nexport const updateNetWorth = async (roomID, userID) => {\r\n    const dayIndex = await getDayIndex(roomID);\r\n    const prices = await getPrices(roomID, dayIndex);\r\n    const userData = await getUserData(roomID, userID);\r\n    const userRef = getUserRef(roomID, userID);\r\n    const curShares = userData.curShares;\r\n    var netWorth = userData.money_left;\r\n    curShares.map((numShares,idx) => {netWorth += numShares * prices[idx];});\r\n    if (userData.net_worth == netWorth) return;\r\n    await userRef.update({net_worth: netWorth});\r\n}\r\n\r\n// retrieves symbol name given the symbol's index\r\nexport const getSymbolNameFromIndex = async (db, roomID, symbolIndex) => {\r\n    const roomDoc = await db.collection('Rooms').doc(roomID).get();\r\n    const symbols = roomDoc.data().symbols;\r\n    return symbols[symbolIndex];\r\n}","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {db, fire, auth, firestore} from '../../firebase.js';\r\nimport {setUpRoom} from '../firebase-access.jsx'\r\n\r\nfunction generateGameId() {\r\n    let id = '';\r\n    const possible = '0123456789';\r\n    for (let i=0; i<6; i++) {\r\n        id += possible.charAt(Math.floor(Math.random() * 10));\r\n    }\r\n    return id;\r\n}\r\n\r\nclass Create extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pagetype: 'not-created',\r\n            gameId: '',\r\n        }\r\n        this.createGameWrapper = this.createGameWrapper.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n    }\r\n\r\n    // createGameWrapper() {\r\n    //     console.log(\"create game called\");\r\n    //     const that = this;\r\n    //     //create game doc in firestore database\r\n    //     var _gameId = generateGameId();\r\n    //     this.setState({\r\n    //         gameId: _gameId,\r\n    //     });\r\n    //     var gameRef = db.collection(\"Rooms\").doc(_gameId);\r\n    //     gameRef.set({\r\n    //         created: Date.now(),\r\n    //         currentQuestion: 0,\r\n    //         phase: 'created',\r\n    //         gameId: _gameId,\r\n    //     })\r\n    //\r\n    //     //create subcollections for users\r\n    //     var questionsRef = gameRef.collection(\"questions\").doc(\"Test Q\").set({});\r\n    //     var usersRef = gameRef.collection(\"users\").doc(\"Test user\").set({});\r\n    //\r\n    //     //update props\r\n    //     this.setState({\r\n    //         pagetype: 'created',\r\n    //     });\r\n    // }\r\n    async createGameWrapper() {\r\n        var _gameId = await setUpRoom(db,1,3,null,'');\r\n        this.setState({\r\n            pagetype: 'created',\r\n            gameId: _gameId,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log('render called');\r\n        const {pagetype,gameId} = this.state;\r\n        console.log(pagetype);\r\n        console.log(gameId);\r\n        return (\r\n\r\n            <div className=\"app-page create-page\">\r\n                {pagetype === 'not-created' &&\r\n                    <button onClick={async () => await this.createGameWrapper()}> Create Game! </button>\r\n                }\r\n\r\n                {pagetype === 'created' && (\r\n                    <div>\r\n                        <span>Created game PIN: </span>\r\n                        {' '}\r\n                        <span className=\"dynamic-text\">{gameId}</span>\r\n                        {' '}\r\n                        <Link to=\"/host\">Copy this ID and use it host the game</Link>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Create;","import React, { Component } from 'react';\r\n\r\nclass Quiz extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"host-container\">\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport {Quiz};","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport {Quiz} from '../quiz/host/Quiz.js';\r\nimport {db,fire} from '../../firebase.js';\r\n\r\nfunction fetchGame(gameId, callback) {\r\n    return fire.database().ref('/Rooms').orderByChild('gameId').equalTo(gameId).once('value',callback);\r\n}\r\n\r\n/*\r\nPossible phases:\r\n- not-joined : display joining game\r\n- connection : players joining phase\r\n- question : displaying questions phase\r\n- between-question : display a page between questions\r\n- leaderboards : display the winners at the end\r\n- ended : the game has ended\r\n */\r\n\r\n/*\r\nGame structure:\r\n- phase: (see above)\r\n- starting_money: contains starting value for users\r\n- day_index: which date is used\r\n- password: password\r\n- symbols: array of symbols\r\n* User collection\r\n\r\n */\r\n\r\nclass Host extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            phase: 'not-joined',\r\n            questionNum: 0,\r\n            gameId: null,\r\n            password: '',\r\n            authenticated: 'no',\r\n            listening: 'no',\r\n            users: [],\r\n        }\r\n        this.userExists = this.userExists.bind(this);\r\n        this.updateUsers = this.updateUsers.bind(this);\r\n        this.joinGame = this.joinGame.bind(this);\r\n        this.updatePhase = this.updatePhase.bind(this);\r\n        this.initGameListener = this.initGameListener.bind(this);\r\n        this.restartGame = this.restartGame.bind(this);\r\n        this.quitGame = this.quitGame.bind(this);\r\n        this.endGame = this.endGame.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {gameId} = this.state;\r\n    }\r\n\r\n    componentDidChange() {\r\n    }\r\n\r\n    handleChangeSelect = (event) => {\r\n        this.setState({[event.target.name]:event.target.value});\r\n    };\r\n\r\n    handleChange = name => (event) => {\r\n        this.setState({\r\n            [name]:event.target.value,\r\n        });\r\n    }\r\n\r\n    userExists(userId) {\r\n        this.state.users.array.forEach(function(item,index) {\r\n            if (item.id == userId) return true;\r\n        });\r\n        return false;\r\n    }\r\n\r\n    updatePhase(gameupdate) {\r\n        const {gameId} = this.state;\r\n        this.setState({\r\n            phase: gameupdate,\r\n        })\r\n        db.collection('Rooms').doc(gameId).update({\r\n            phase: gameupdate,\r\n        });\r\n    }\r\n\r\n    restartGame() {\r\n\r\n    }\r\n\r\n    quitGame() {\r\n        const {toggleHeader} = this.props;\r\n        this.updateGame({phase:null});\r\n    }\r\n\r\n    endGame(){\r\n        this.updateGame({phase:'final_result'});\r\n    }\r\n\r\n    addDummyUser(nickname) {\r\n        const {gameId} = this.state;\r\n        const gameRef = db.collection('Rooms').doc(gameId);\r\n        const userRef = gameRef.collection('users').doc(nickname);\r\n\r\n        const gameInfo = {\r\n            nickname: nickname,\r\n            investments: [],\r\n            personal_value: -1,\r\n            money_left: -1,\r\n            gains: 0,\r\n            losses: 0,\r\n        }\r\n        userRef.set(gameInfo);\r\n    }\r\n\r\n    updateUsers() {\r\n        const {password,gameId} = this.state;\r\n        const that = this;\r\n        var gameRef = db.collection('Rooms').doc(gameId);\r\n        gameRef.collection('users').get().then((snapshot) => {\r\n            snapshot.docs.forEach(user => {\r\n                if (!that.userExists(user.id)) {\r\n                    console.log(\"adding new user\");\r\n                    var newUser = user.data();\r\n                    that.setState({\r\n                        users: that.state.users.concat([newUser]),\r\n                    })\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    joinGame() {\r\n        const {password,gameId} = this.state;\r\n        const that = this;\r\n        var gameRef = db.collection('Rooms').doc(gameId);\r\n        gameRef.get().then(function(gameData) {\r\n            if (gameData.exists) {\r\n                var gameInfo = gameData.data();\r\n                if (gameInfo.password === password && gameInfo.phase === 'no-host') {\r\n                    that.setState({\r\n                        authenticated: 'yes',\r\n                        phase: 'connection',\r\n                    });\r\n\r\n                    that.addDummyUser('dummy user');\r\n                    that.updateUsers();\r\n                    that.initGameListener();\r\n                    gameRef.update({\r\n                        phase: 'connection',\r\n                    })\r\n                } else {\r\n                    console.log(\"wrong password\");\r\n                }\r\n            } else {\r\n                console.log(\"room \" + gameId + \" does not exist\");\r\n            }\r\n        });\r\n    }\r\n\r\n    initGameListener() {\r\n        const {gameId} = this.state;\r\n        var gameRef = db.collection('Rooms').doc(gameId);\r\n        const that = this;\r\n\r\n        gameRef.onSnapshot(function(gameData) {\r\n            that.updateUsers();\r\n        });\r\n    }\r\n\r\n    startGame() {\r\n        const that = this;\r\n        that.updatePhase('question');\r\n    }\r\n\r\n    advanceQuestion() {\r\n        const {gameId} = this.state;\r\n        const that = this;\r\n        this.setState({\r\n            questionNum: that.state.questionNum + 1,\r\n        });\r\n        db.collection('Rooms').doc(gameId).update({\r\n            date_index: that.state.questionNum,\r\n        });\r\n    }\r\n\r\n    /*\r\n    Possible phases:\r\n    - not-joined : display joining game\r\n    - connection : players joining phase\r\n    - question : displaying questions phase\r\n    - between-question : display a page between questions\r\n    - leaderboards : display the winners at the end\r\n    - ended : the game has ended\r\n     */\r\n    render() {\r\n        const {gameId, password, phase, authenticated, users, questionNum} = this.state;\r\n        const gameFunctions = {\r\n            update: this.updateGame,\r\n            restart: this.restartGame,\r\n            end: this.endGame,\r\n            quit: this.quitGame,\r\n        }\r\n\r\n        if (authenticated === 'no') {\r\n            return (\r\n                <div className=\"page-container host-page\">\r\n                    <FormControl>\r\n                        <TextField label=\"Game PIN\" name=\"Game ID\" value={gameId}\r\n                                   onChange={this.handleChange('gameId')}/>\r\n                    </FormControl>\r\n                    <FormControl>\r\n                        <TextField label=\"Password\" type=\"password\" name=\"password\" value={password}\r\n                                   onChange={this.handleChange('password')}/>\r\n                    </FormControl>\r\n                    <Button onClick={() => this.joinGame()} variant=\"contained\">Host</Button>\r\n                </div>\r\n            )\r\n        } else if (authenticated === 'yes') {\r\n            if (phase === 'connection') {\r\n                return (\r\n                    <div className=\"page-container host-page\">\r\n                        <p> Users List </p>\r\n                        <ul id=\"user-list\">\r\n                            {users.map(user => (\r\n                                <li >{user.nickname}</li>\r\n                            ))\r\n                            }\r\n                        </ul>\r\n                        <button onClick={() => this.startGame()}>start stonks game</button>\r\n                    </div>\r\n                )\r\n            } else if (phase === 'question') {\r\n                return (\r\n                    <div className=\"page-container host-page\">\r\n                        <span>Current question: </span>\r\n                        {' '}\r\n                        <span className=\"dynamic-text\">{questionNum}</span>\r\n                        <p> Users List </p>\r\n                        <ul id=\"user-list\">\r\n                            {users.map(user => (\r\n                                <li key={user.id}>{user.nickname}</li>\r\n                            ))\r\n                            }\r\n                        </ul>\r\n                        <button onClick={() => this.advanceQuestion()}>next question</button>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n        // return (\r\n        //     <div className=\"page-container host-page\">\r\n        //         {game.gametype === 'quiz' && <Quiz game={game} gameFunc={gameFunctions}/>}\r\n        //     </div>\r\n        // );\r\n    }\r\n}\r\n\r\nexport default Host;","import React, { Component } from 'react';\r\nimport {fire} from '../../../firebase.js';\r\n\r\n\r\nclass Quiz extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.saveAnswer = this.saveAnswer.bind(this);\r\n    }\r\n\r\n    saveAnswer(answer) {\r\n        let that = this;\r\n        let currentQuestionId = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].id;\r\n        fire.database().ref('/Rooms/' + that.props.game.key + '/players/' + this.props.playerKey + '/answers/' + currentQuestionId).set(answer, function(error) {\r\n            var x = 1+1;\r\n        }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n};\r\n\r\nexport {Quiz};\r\n\r\n\r\n/* Code for Round.jsx is below\r\nimport React, {Component,Fragment} from 'react';\r\nimport {Helmet} from 'react-helmet';\r\n\r\nimport {firestore} from '../../firebase';\r\nimport {getUserID} from '../../firebase';\r\n\r\nimport {getChartUrl, getTechnicalUrl,getSymbols} from '../firestore-access';\r\nimport {getCurrentPrice} from '../firestore-access';\r\nimport {advanceDay} from '../firestore-access';\r\nimport {getDate} from '../firestore-access';\r\nimport {DATES} from '../firestore-access';\r\nimport {getUserShares} from '../firestore-access';\r\nimport {makeInvestment} from '../firestore-access';\r\nimport {getUserBalance} from '../firestore-access';\r\n\r\nclass Round extends React.Component {\r\n\r\n    constructor (props) {\r\n        super(props)\r\n        this.state = {\r\n            chartURL: null,\r\n            technicalIndicators: null,\r\n            roomID: this.props.location.state.roomID,\r\n            currentCash: null,\r\n            currentShares: null,\r\n            currentPrice: null,\r\n            userChoice: null,\r\n            userNumShares: null,\r\n            currSymbol: null,\r\n            //leaderboard: null,\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        console.log(\"RoomID is \" + this.state.roomID)\r\n\r\n        const userID = getUserID();\r\n        const end  = getDate(firestore,this.state.roomID);\r\n        const symbols = await getSymbols(firestore,this.state.roomID)\r\n        let symbol = symbols[0]\r\n        this.setState({\r\n            currSymbol: symbol,\r\n            technicalIndicators: await getTechnicalUrl(firestore,this.state.roomID,symbol,end) ,\r\n            chartURL: await getChartUrl(firestore,this.state.roomID,symbol,end),\r\n            currentCash: await getUserBalance(firestore, this.state.roomID, userID),\r\n            currentShares: await getUserShares(firestore, this.state.roomID, userID),\r\n            currentPrice: await getCurrentPrice(firestore, symbol,this.state.roomID),\r\n            userNumShares: (await getUserShares(firestore, this.state.roomID, userID)).length\r\n        });\r\n    }\r\n\r\n    buy = () => {\r\n      this.setState({userChoice: 'buy'});\r\n    }\r\n\r\n    hold = () => {\r\n      this.setState({userChoice: 'hold'});\r\n    }\r\n\r\n    sell = () => {\r\n      this.setState({userChoice: 'sell'});\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n      event.preventDefault(); // prevent page\r\n      // make the investment\r\n      makeInvestment(firestore, this.state.roomID, getUserID(), this.state.currSymbol, 100, 3);\r\n    if(advanceDay(firestore,this.state.roomID))\r\n    {\r\n        alert(\"recorded the investment\");\r\n    }\r\n    else\r\n    {\r\n        alert(\"Game is finished.\")\r\n    }\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n                <p className=\"price\">The current price per share is ${this.state.currentPrice}</p>\r\n                <p className=\"usr-current-shares\">You current hold {this.state.userNumShares} shares</p>\r\n                <p className=\"usr-available-money\">You have ${this.state.currentCash} left to spend.</p>\r\n\r\n                <form onSubmit={this.submitHandler}>\r\n                    <button onClick={this.buy}>Buy</button>\r\n\r\n                    <label>Enter number of shares:</label>\r\n                    <input\r\n                        name=\"num-shares\"\r\n                        type=\"number\"\r\n                    />\r\n\r\n                    <button onClick={this.sell}>Sell</button>\r\n                    <button onClick={this.hold}>Hold</button>\r\n\r\n                    <input\r\n                        type=\"submit\"\r\n                    />\r\n                </form>\r\n\r\n\r\n                <div id=\"confirmation\"></div>\r\n            </div>\r\n        )\r\n    }\r\n    }\r\n\r\n    export default Round;\r\n*/","import React, {Component,Fragment} from 'react';\r\nimport {db,fire} from '../../firebase.js';\r\nimport {Quiz} from '../quiz/play/Quiz.jsx';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport {Helmet} from 'react-helmet';\r\nimport {isRedirect} from \"@reach/router\";\r\n\r\nfunction fetchGame(gameId,callback) {\r\n    fire.database().ref('/Rooms').orderByChild('gameId').equalTo(gameId).once('value',callback);\r\n}\r\n\r\nclass Play extends Component {\r\n\r\n    /*\r\n    Possible phases:\r\n    - not-joined : display joining game\r\n    - connection : players joining phase\r\n    - question : displaying questions phase\r\n    - between-question : display a page between questions\r\n    - leaderboards : display the winners at the end\r\n    - ended : the game has ended\r\n     */\r\n\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            //static properties\r\n            gameId: null,\r\n            password: '',\r\n            userId: '',\r\n            nickname: '',\r\n\r\n            //frequently updated properties\r\n            phase: 'not-joined',\r\n            questionNum: 0,\r\n            chartURLs: [],\r\n            technicalIndicatorUrls: [],\r\n            net_worth: 0,\r\n            cash: [],\r\n            curShares: [],\r\n            prices: [],\r\n        };\r\n        this.addUser = this.addUser.bind(this);\r\n        this.joinGame = this.joinGame.bind(this);\r\n        this.initGameListener = this.initGameListener.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    handleChangeSelect = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    handleChange = name => (event) => {\r\n        this.setState({\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    ////frequently updated properties\r\n    //             phase: 'not-joined',\r\n    //             questionNum: 0,\r\n    //             chartURLs: [],\r\n    //             technicalIndicatorUrls: [],\r\n    //             netWorth: 0,\r\n    //             cash: [],\r\n    //             curShares: [],\r\n    //             prices: [],\r\n    initGameListener() {\r\n        const that = this;\r\n        const {questionNum,gameId,phase,nickname} = this.state;\r\n        const gameRef = db.collection('Rooms').doc(gameId);\r\n        gameRef.onSnapshot(function(gameDoc) {\r\n            const gameData = gameDoc.data();\r\n            const curQuestionNum = gameData.day_index;\r\n            const curPhase = gameData.phase;\r\n            console.log(gameData);\r\n            if (questionNum != curQuestionNum) {\r\n                that.setState({\r\n                    questionNum: curQuestionNum + 1,\r\n                });\r\n                //TODO: fetch question data\r\n            }\r\n            if (phase !== curPhase) {\r\n                that.setState({\r\n                    phase: curPhase,\r\n                });\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    joinGame() {\r\n        const {gameId,password,nickname} = this.state;\r\n        const that = this;\r\n        const gameRef = db.collection('Rooms').doc(gameId);\r\n        gameRef.get().then(function(gameData) {\r\n            if (gameData.exists) {\r\n                var gameInfo = gameData.data();\r\n                if (gameInfo.password === password && gameInfo.phase === 'connection') {\r\n                    var uniqueUserId = that.addUser(nickname,gameInfo.starting_money);\r\n                    that.setState({\r\n                        phase: 'connection',\r\n                        userId: uniqueUserId,\r\n                        net_worth: gameInfo.starting_money,\r\n                        cash: gameInfo.starting_money,\r\n                    });\r\n                    that.initGameListener();\r\n\r\n                } else if (gameInfo.password === password) {\r\n                    console.log(\"game not being hosted yet\");\r\n                } else if (gameInfo.phase === 'connection') {\r\n                    console.log(\"incorrect password\");\r\n                } else {\r\n                    console.log(\"game does not exist\");\r\n                }\r\n            } else {\r\n                console.log(\"room \" + gameId + \" does not exist\");\r\n            }\r\n        });\r\n    }\r\n\r\n    addUser(starting_money) {\r\n        const {gameId,nickname} = this.state;\r\n        const gameRef = db.collection('Rooms').doc(gameId);\r\n        const userRef = gameRef.collection('users').doc();\r\n        const userId = userRef.id;\r\n\r\n        const gameInfo = {\r\n            nickname: nickname,\r\n            investments: [],\r\n            net_worth: starting_money,\r\n            money_left: starting_money,\r\n            gains: 0,\r\n            losses: 0,\r\n        }\r\n\r\n        userRef.set(gameInfo);\r\n        return userId;\r\n    }\r\n\r\n    render () {\r\n        const {game,phase,password,nickname,playerKey,questionNum,gameId,recentGameId,recentGame,isRedirected,gametype} = this.state;\r\n        console.log(questionNum);\r\n        if (phase === 'not-joined') {\r\n            return (\r\n                <div className=\"page-container play-page\">\r\n                    <div>\r\n                        <FormControl>\r\n                            <TextField label=\"Nickname\" name=\"nickname\" value={nickname}\r\n                                       onChange={this.handleChange('nickname')}/>\r\n                        </FormControl>\r\n                        <FormControl>\r\n                            <TextField label=\"Game PIN\" name=\"Game ID\" value={gameId} onChange={this.handleChange('gameId')}/>\r\n                        </FormControl>\r\n                        <FormControl>\r\n                            <TextField label=\"Password\" type=\"password\" name=\"password\" value={password}\r\n                                       onChange={this.handleChange('password')}/>\r\n                        </FormControl>\r\n                        <Button onClick={() => this.joinGame()} variant=\"contained\">Join</Button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else if (phase === 'connection') {\r\n            return (\r\n                <div>\r\n                    <p> Connected. Please wait for host to start game. </p>\r\n                </div>\r\n            )\r\n        } else if (phase === 'question') {\r\n            return (\r\n                <div>\r\n                    <span>Current question: </span>\r\n                    {' '}\r\n                    <span className=\"dynamic-text\">{questionNum}</span>\r\n                    <p> (question info will be displayed here) </p>\r\n                    <button> Buy </button>\r\n                    <button> Sell </button>\r\n                    <button> Hold </button>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default Play;","import React, { Component, createContext } from \"react\";\r\nimport { auth } from \"../../../firebase\";\r\n\r\nexport const UserContext = createContext({ user: null });\r\nclass UserProvider extends Component {\r\n  state = {\r\n    user: null\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    auth.onAuthStateChanged(userAuth => {\r\n      this.setState({user: userAuth});\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <UserContext.Provider value={this.state.user}>\r\n        {this.props.children}\r\n      </UserContext.Provider>\r\n    );\r\n  }\r\n}\r\nexport default UserProvider;","import React, {Component,Fragment} from 'react';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Link, withRouter} from 'react-router-dom';\r\n\r\nimport UserProvider from \"../authenticate/providers/UserProvider\";\r\nimport { UserContext } from \"../authenticate/providers/UserProvider\";\r\n\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={};\r\n    }\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Helmet><title> toohak stonks quizzes </title></Helmet>\r\n                <div id=\"home\">\r\n                    <section>\r\n                        <div></div>\r\n                        <h1>toohak app</h1>\r\n                        <div className=\"play-button-container\">\r\n                            <ul>\r\n                                <li><Link to=\"/play\">Play</Link></li>\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"host-button-container\">\r\n                            <p><Link to=\"/host\">Host a room</Link></p>\r\n                        </div>\r\n                        <div className=\"create-button-container\">\r\n                            <p><Link to=\"/create\">Create a room</Link></p>\r\n                        </div>\r\n                        <div className=\"auth-container\">\r\n                            <Link to=\"/auth/signIn\">Login</Link>\r\n                            <Link to=\"/auth/signUp\">Signup</Link>\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React, {Fragment, Component} from 'react';\r\nimport {Helmet} from 'react-helmet';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\nimport Create from './Components/pages/Create'\r\nimport Host from './Components/pages/Host'\r\nimport Play from './Components/pages/Play'\r\nimport Home from './Components/pages/Home'\r\n\r\nimport UserProvider from './Components/authenticate/providers/UserProvider.jsx';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={};\r\n  }\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <div id=\"content\">\r\n            <Route exact path=\"/play\" render={() => <Play />} />\r\n            <Route exact path=\"/host\" render={() => <Host />} />\r\n            <Route exact path=\"/create\" render={() => <Create />} />\r\n            <Route exact path=\"/\" render={() => <Home />} />\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}