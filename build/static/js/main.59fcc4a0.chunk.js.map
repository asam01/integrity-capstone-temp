{"version":3,"sources":["firebase.js","providers/UserProvider.jsx","Components/Home.jsx","Components/quiz/Lobby.js","Components/quiz/Play.js","Components/authenticate/SignIn.jsx","Components/authenticate/SignUp.jsx","Components/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","provider","firestore","GoogleAuthProvider","signInWithGoogle","signInWithPopup","UserContext","createContext","user","UserProvider","state","componentDidMount","onAuthStateChanged","userAuth","setState","Provider","value","this","props","children","Component","Home","Helmet","id","className","to","GameLobby","Play","chartURL","technicalIndicators","currentCash","currentShares","leaderboard","React","SignIn","useState","error","onClick","SignUp","displayName","setDisplayName","htmlFor","type","name","placeholder","onChange","event","currentTarget","onChangeHandler","Game","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.59fcc4a0.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyArVyBRB-XMiStAmjP5mCV2v2PmScbEpi8\",\r\n  authDomain: \"integrity-step-capstone.firebaseapp.com\",\r\n  databaseURL: \"https://integrity-step-capstone.firebaseio.com\",\r\n  projectId: \"integrity-step-capstone\",\r\n  storageBucket: \"integrity-step-capstone.appspot.com\",\r\n  messagingSenderId: \"359578935158\",\r\n  appId: \"1:359578935158:web:89d46122b0609b4a95a457\",\r\n  measurementId: \"G-GMNRGZQ858\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nexport const signInWithGoogle = () => {\r\n  auth.signInWithPopup(provider);\r\n};\r\n","import React, { Component, createContext } from \"react\";\r\nimport { auth } from \"../firebase\";\r\n\r\nexport const UserContext = createContext({ user: null });\r\nclass UserProvider extends Component {\r\n  state = {\r\n    user: null\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    auth.onAuthStateChanged(userAuth => {\r\n      this.setState({ user: userAuth});\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <UserContext.Provider value={this.state.user}>\r\n        {this.props.children}\r\n      </UserContext.Provider>\r\n    );\r\n  }\r\n}\r\nexport default UserProvider;","/*import React from \"react\";\r\nimport { Router } from \"@reach/router\";\r\nimport SignIn from \"./authenticate/SignIn\";\r\nimport SignUp from \"./authenticate/SignUp\";\r\nfunction Home() {\r\n  const user = null;\r\n  return (\r\n    <Router>\r\n        <SignUp path=\"signUp\" />\r\n        <SignIn path=\"/\" />\r\n    </Router>\r\n\r\n  );\r\n}\r\nexport default Home;\r\n*/\r\n\r\nimport React, {Fragment} from 'react';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport UserProvider from \"../providers/UserProvider\";\r\nimport { UserContext } from \"../providers/UserProvider\";\r\n\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\n\r\nconst Home = () => {\r\n    //const user = useContext(UserContext);        \r\n    return (\r\n        <Fragment>\r\n            <Helmet> <title> toohak stonks quizzes </title> </Helmet>\r\n            <div id=\"home\">\r\n                <section>\r\n                    <div></div>\r\n                    <h1>toohak app</h1>\r\n                    <div className=\"play-button-container\">\r\n                        <ul>\r\n                            <li><Link to=\"/play/lobby\">Play</Link></li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"auth-container\">\r\n                        <Link to=\"/auth/signIn\">Login</Link>\r\n                        <Link to=\"/auth/signUp\">Signup</Link>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, { Component, Fragment } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Helmet} from 'react-helmet';\r\n\r\nconst GameLobby = () => (\r\n    <Fragment>\r\n        <Helmet><title>Game Lobby</title></Helmet>\r\n        <div className=\"room code container\">\r\n            <p>Room code</p>\r\n            <p>123456</p>\r\n        </div>\r\n        <div className=\"lobby members list\">\r\n            <p>room members</p>\r\n            <ul>\r\n                <li>Aneesha</li>\r\n                <li>John</li>\r\n                <li>Jack</li>\r\n                <li>Yeet</li>\r\n            </ul>\r\n        </div>\r\n        <Link to=\"/play/game\"> start game </Link>\r\n    </Fragment>\r\n\r\n)\r\n\r\nexport default GameLobby;","import React, {Component,Fragment} from 'react';\r\nimport {Helmet} from 'react-helmet';\r\n\r\nclass Play extends React.Component {\r\n\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            chartURL: null,\r\n            technicalIndicators: null,\r\n            currentCash: null,\r\n            currentShares: null,\r\n            leaderboard: null,\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <h1> WIP quiz page </h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Play;","import React, {useState} from \"react\";\r\nimport { Link } from \"@reach/router\";\r\nimport { signInWithGoogle } from \"../../firebase\";\r\nimport { auth } from \"../../firebase\";\r\n\r\nconst SignIn = () => {\r\n    const [error, setError] = useState(null);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Sign In</h1>\r\n      <div>\r\n        {error !== null && <div>{error}</div>}\r\n\r\n        <button onClick={() => {signInWithGoogle();}}>\r\n          Sign In with Google\r\n        </button>\r\n        <p>\r\n          Don't have an account?{\" \"}\r\n          <Link to=\"/auth/signUp\" className=\"text-blue-500 hover:text-blue-600\">\r\n            Sign up here\r\n          </Link>{\" \"}\r\n          <br />{\" \"}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default SignIn;","import React, { useState } from \"react\";\r\nimport { Link } from \"@reach/router\";\r\nimport { signInWithGoogle } from \"../../firebase\";\r\nimport { auth } from \"../../firebase\";\r\n\r\nconst SignUp = () => {\r\n  const [displayName, setDisplayName] = useState(\"\");\r\n  const [error, setError] = useState(null);\r\n  \r\n  const onChangeHandler = event => {\r\n    const { name, value } = event.currentTarget;\r\n    setDisplayName(value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Sign Up</h1>\r\n      <div>\r\n        {error !== null && (\r\n          <div>\r\n            {error}\r\n          </div>\r\n        )}\r\n        <form className=\"\">\r\n          <label htmlFor=\"displayName\" className=\"block\">\r\n            Display Name:\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"my-1 p-1 w-full \"\r\n            name=\"displayName\"\r\n            value={displayName}\r\n            placeholder=\"My Name\"\r\n            id=\"displayName\"\r\n            onChange={event => onChangeHandler(event)}\r\n          />\r\n        </form>\r\n        <button onClick={() => {signInWithGoogle();}}>\r\n          Sign In with Google\r\n        </button>\r\n        <p className=\"text-center my-3\">\r\n          Already have an account?{\" \"}\r\n          <Link to=\"/auth/signIn\"> Sign in here </Link>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default SignUp;","import React, {Fragment} from 'react';\r\nimport {Helmet} from 'react-helmet';\r\n//import logo from './logo.svg';\r\n//import './App.css';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\n\r\n\r\nimport Home from './Home';\r\nimport GameLobby from './quiz/Lobby.js';\r\nimport Play from './quiz/Play.js';\r\nimport SignIn from \"./authenticate/SignIn\";\r\nimport SignUp from \"./authenticate/SignUp\";\r\n\r\nfunction Game() {\r\n  return (\r\n    <Router>\r\n      <Route path = \"/\" exact component={Home}/>\r\n      <Route path = \"/play/lobby\" exact component={GameLobby}/>\r\n      <Route path = \"/play/game\" exact component={Play}/>\r\n      <Route path = \"/auth/signIn\" exact component={SignIn}/>\r\n      <Route path = \"/auth/signUp\" exact component={SignUp}/>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default Game;","import React, {Fragment} from 'react';\r\nimport {Helmet} from 'react-helmet';\r\n//import logo from './logo.svg';\r\n//import './App.css';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\n\r\nimport UserProvider from \"./providers/UserProvider\";\r\nimport Game from \"./Components/Game\";\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <UserProvider>\r\n      <Game />\r\n    </UserProvider>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import './index.css';\r\n//import './styles/styles.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}