{"version":3,"sources":["firebase.js","providers/UserProvider.jsx","Components/Home.jsx","Components/quiz/Lobby.js","Components/quiz/Play.js","Components/authenticate/SignIn.jsx","Components/authenticate/SignUp.jsx","Components/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","provider","firestore","GoogleAuthProvider","signInWithGoogle","signInWithPopup","UserContext","createContext","user","UserProvider","state","componentDidMount","onAuthStateChanged","userAuth","setState","Provider","value","this","props","children","Component","Home","Helmet","id","className","to","GameLobby","Play","chartURL","technicalIndicators","currentCash","currentShares","leaderboard","React","SignIn","useState","error","onClick","SignUp","displayName","setDisplayName","htmlFor","type","name","placeholder","onChange","event","currentTarget","onChangeHandler","Game","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.60428b30.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArVyBRB-XMiStAmjP5mCV2v2PmScbEpi8\",\n  authDomain: \"integrity-step-capstone.firebaseapp.com\",\n  databaseURL: \"https://integrity-step-capstone.firebaseio.com\",\n  projectId: \"integrity-step-capstone\",\n  storageBucket: \"integrity-step-capstone.appspot.com\",\n  messagingSenderId: \"359578935158\",\n  appId: \"1:359578935158:web:89d46122b0609b4a95a457\",\n  measurementId: \"G-GMNRGZQ858\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nexport const signInWithGoogle = () => {\n  auth.signInWithPopup(provider);\n};\n","import React, { Component, createContext } from \"react\";\nimport { auth } from \"../firebase\";\n\nexport const UserContext = createContext({ user: null });\nclass UserProvider extends Component {\n  state = {\n    user: null\n  };\n\n  componentDidMount = () => {\n    auth.onAuthStateChanged(userAuth => {\n      this.setState({ user: userAuth});\n    });\n  };\n  render() {\n    return (\n      <UserContext.Provider value={this.state.user}>\n        {this.props.children}\n      </UserContext.Provider>\n    );\n  }\n}\nexport default UserProvider;","/*import React from \"react\";\nimport { Router } from \"@reach/router\";\nimport SignIn from \"./authenticate/SignIn\";\nimport SignUp from \"./authenticate/SignUp\";\nfunction Home() {\n  const user = null;\n  return (\n    <Router>\n        <SignUp path=\"signUp\" />\n        <SignIn path=\"/\" />\n    </Router>\n\n  );\n}\nexport default Home;\n*/\n\nimport React, {Fragment} from 'react';\nimport {Helmet} from 'react-helmet';\nimport {Link} from 'react-router-dom';\n\nimport UserProvider from \"../providers/UserProvider\";\nimport { UserContext } from \"../providers/UserProvider\";\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nconst Home = () => {\n    //const user = useContext(UserContext);        \n    return (\n        <Fragment>\n            <Helmet> <title> toohak stonks quizzes </title> </Helmet>\n            <div id=\"home\">\n                <section>\n                    <div></div>\n                    <h1>toohak app</h1>\n                    <div className=\"play-button-container\">\n                        <ul>\n                            <li><Link to=\"/play/lobby\">Play</Link></li>\n                        </ul>\n                    </div>\n                    <div className=\"auth-container\">\n                        <Link to=\"/auth/signIn\">Login</Link>\n                        <Link to=\"/auth/signUp\">Signup</Link>\n                    </div>\n                </section>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default Home;","import React, { Component, Fragment } from 'react';\nimport {Link} from 'react-router-dom';\nimport {Helmet} from 'react-helmet';\n\nconst GameLobby = () => (\n    <Fragment>\n        <Helmet><title>Game Lobby</title></Helmet>\n        <div className=\"room code container\">\n            <p>Room code</p>\n            <p>123456</p>\n        </div>\n        <div className=\"lobby members list\">\n            <p>room members</p>\n            <ul>\n                <li>Aneesha</li>\n                <li>John</li>\n                <li>Jack</li>\n                <li>Yeet</li>\n            </ul>\n        </div>\n        <Link to=\"/play/game\"> start game </Link>\n    </Fragment>\n\n)\n\nexport default GameLobby;","import React, {Component,Fragment} from 'react';\nimport {Helmet} from 'react-helmet';\n\nclass Play extends React.Component {\n\n    constructor (props) {\n        super(props);\n        this.state = {\n            chartURL: null,\n            technicalIndicators: null,\n            currentCash: null,\n            currentShares: null,\n            leaderboard: null,\n        }\n    }\n\n    render () {\n        return (\n            <h1> WIP quiz page </h1>\n        )\n    }\n}\n\nexport default Play;","import React, {useState} from \"react\";\nimport { Link } from \"@reach/router\";\nimport { signInWithGoogle } from \"../../firebase\";\nimport { auth } from \"../../firebase\";\n\nconst SignIn = () => {\n    const [error, setError] = useState(null);\n\n  return (\n    <div>\n      <h1>Sign In</h1>\n      <div>\n        {error !== null && <div>{error}</div>}\n\n        <button onClick={() => {signInWithGoogle();}}>\n          Sign In with Google\n        </button>\n        <p>\n          Don't have an account?{\" \"}\n          <Link to=\"/auth/signUp\" className=\"text-blue-500 hover:text-blue-600\">\n            Sign up here\n          </Link>{\" \"}\n          <br />{\" \"}\n        </p>\n      </div>\n    </div>\n  );\n};\nexport default SignIn;","import React, { useState } from \"react\";\nimport { Link } from \"@reach/router\";\nimport { signInWithGoogle } from \"../../firebase\";\nimport { auth } from \"../../firebase\";\n\nconst SignUp = () => {\n  const [displayName, setDisplayName] = useState(\"\");\n  const [error, setError] = useState(null);\n  \n  const onChangeHandler = event => {\n    const { name, value } = event.currentTarget;\n    setDisplayName(value);\n  };\n\n  return (\n    <div>\n      <h1>Sign Up</h1>\n      <div>\n        {error !== null && (\n          <div>\n            {error}\n          </div>\n        )}\n        <form className=\"\">\n          <label htmlFor=\"displayName\" className=\"block\">\n            Display Name:\n          </label>\n          <input\n            type=\"text\"\n            className=\"my-1 p-1 w-full \"\n            name=\"displayName\"\n            value={displayName}\n            placeholder=\"My Name\"\n            id=\"displayName\"\n            onChange={event => onChangeHandler(event)}\n          />\n        </form>\n        <button onClick={() => {signInWithGoogle();}}>\n          Sign In with Google\n        </button>\n        <p className=\"text-center my-3\">\n          Already have an account?{\" \"}\n          <Link to=\"/auth/signIn\"> Sign in here </Link>\n        </p>\n      </div>\n    </div>\n  );\n};\nexport default SignUp;","import React, {Fragment} from 'react';\nimport {Helmet} from 'react-helmet';\n//import logo from './logo.svg';\n//import './App.css';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\n\nimport Home from './Home';\nimport GameLobby from './quiz/Lobby.js';\nimport Play from './quiz/Play.js';\nimport SignIn from \"./authenticate/SignIn\";\nimport SignUp from \"./authenticate/SignUp\";\n\nfunction Game() {\n  return (\n    <Router>\n      <Route path = \"/\" exact component={Home}/>\n      <Route path = \"/play/lobby\" exact component={GameLobby}/>\n      <Route path = \"/play/game\" exact component={Play}/>\n      <Route path = \"/auth/signIn\" exact component={SignIn}/>\n      <Route path = \"/auth/signUp\" exact component={SignUp}/>\n    </Router>\n  );\n}\n\nexport default Game;","import React, {Fragment} from 'react';\nimport {Helmet} from 'react-helmet';\n//import logo from './logo.svg';\n//import './App.css';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nimport UserProvider from \"./providers/UserProvider\";\nimport Game from \"./Components/Game\";\n\nfunction App() {\n  \n  return (\n    <UserProvider>\n      <Game />\n    </UserProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\n//import './styles/styles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}