{"version":3,"sources":["firebase.js","Components/firebase-access.jsx","Components/pages/Create.jsx","Components/pages/Host.jsx","Components/quiz/host/Quiz.js","Components/quiz/play/Quiz.jsx","Components/pages/Play.jsx","Components/authenticate/providers/UserProvider.jsx","Components/pages/Home.jsx","App.jsx","serviceWorker.js","index.js"],"names":["auth","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","debug","GoogleAuthProvider","str","console","log","getNumDays","roomID","a","getRoomData","roomData","dates","length","getStartingMoney","starting_money","addUser","nickname","numDays","getSymbols","numSymbols","getRoomRef","roomRef","collection","doc","userRef","userID","id","empArray","Array","from","gameInfo","userId","net_worth","money_left","curShares","set","i_day","toString","change","setUpRoom","NumOfSymbols","Rounds","password","startingMoney","day_index","phase","initSymbols","then","symbolsL","initDates","datesD","update","symbols","initializeQuiz","getChartUrls","symbol","dayIndex","endDate","getDateFromIndex","get","images","imagesData","data","where","Stocks","IPOyearMax","today","Date","year","getFullYear","forEach","Stock","IPOyear","yearDiff","maximum_period","Math","floor","random_period","random","startDate","start","end","rand_startDate","curr_date","i","push","toISOString","substring","setMonth","getMonth","Industry","Sector","formData","FormData","append","fetch","method","mode","body","response","json","symbolJson","hasOwnProperty","IndustryInfo","numOfIndustries","cutoff","orderBy","limit","Symbol","SectorInfo","numOfSectors","StockInfo","numOfStocks","NumOfStocks","roomId","periodLen","endDates","JSON","stringify","getDayIndex","getPrices","symbolNamesArray","prices","index","currentName","symbolPricesDoc","symbolPricesData","currentPrice","getUserData","updateNetWorth","getUserRef","userData","verifyOk","changeArray","consistentInvestment","curArray","sum","map","num","idx","every","e","totalMoney","price","changeCash","changeShares","investRef","investDoc","exists","makeInvestment","netWorth","numShares","Create","props","state","pagetype","gameId","createGameWrapper","bind","_gameId","this","setState","className","onClick","to","Component","Host","handleChangeSelect","event","target","name","value","handleChange","questionNum","authenticated","listening","users","userExists","updateUsers","joinGame","updatePhase","initGameListener","restartGame","quitGame","endGame","item","gameupdate","toggleHeader","updateGame","that","snapshot","docs","user","userExistsBool","concat","onSnapshot","date_index","FormControl","TextField","label","onChange","type","Button","variant","startGame","key","advanceQuestion","Quiz","chartUrls","curBuyArray","fill","arr","imgUrls","src","onclick","buy","sell","Play","chartURLs","updatePortfolio","roomDoc","userDoc","roomInfo","uniqueUserId","playerKey","isRedirected","UserContext","createContext","Home","Helmet","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.299749ee.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyArVyBRB-XMiStAmjP5mCV2v2PmScbEpi8\",\r\n  authDomain: \"integrity-step-capstone.firebaseapp.com\",\r\n  databaseURL: \"https://integrity-step-capstone.firebaseio.com\",\r\n  projectId: \"integrity-step-capstone\",\r\n  storageBucket: \"integrity-step-capstone.appspot.com\",\r\n  messagingSenderId: \"359578935158\",\r\n  appId: \"1:359578935158:web:89d46122b0609b4a95a457\",\r\n  measurementId: \"G-GMNRGZQ858\"\r\n};\r\n\r\nconst fire = firebase.initializeApp(firebaseConfig);\r\n\r\nconst auth = firebase.auth();\r\nconst firestore = firebase.firestore();\r\nconst db = firebase.firestore();\r\n\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nconst signInWithGoogle = () => {\r\n  auth.signInWithPopup(provider);\r\n};\r\n\r\nexport {db, fire, auth, firestore, signInWithGoogle};\r\n\r\nexport const getUserID = () =>{\r\n  var user = firebase.auth().currentUser;\r\n  if (user != null) {\r\n    return user.uid;\r\n  } else {\r\n    throw \"Null User\"\r\n  }\r\n};\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport {db} from \"../firebase\";\r\n\r\nconst debug = (str) => {\r\n    console.log(str);\r\n}\r\n\r\nexport const getNumDays = async (roomID) => {\r\n    const roomData = await getRoomData(roomID);\r\n    return roomData.dates.length;\r\n}\r\n\r\nexport const getStartingMoney = async (roomID) => {\r\n    const roomData = await getRoomData(roomID);\r\n    return roomData.starting_money;\r\n}\r\n\r\nexport const addUser = async (roomID,nickname) => {\r\n    debug(\"checkpoint 1 firebase-access\");\r\n    const numDays = await getNumDays(roomID);\r\n    debug(\"checkpoint 2 firebase-access\");\r\n    const numSymbols = (await getSymbols(roomID)).length;\r\n    debug(\"checkpoint 3 firebase-access\");\r\n    const roomRef = await getRoomRef(roomID);\r\n    debug(\"checkpoint 4 firebase-access\");\r\n    const userRef = await roomRef.collection('users').doc();\r\n    debug(\"checkpoint 5 firebase-access\");\r\n    const userID = userRef.id;\r\n    const empArray = Array.from(Array(numSymbols),()=>0);\r\n    debug(\"checkpoint 6 firebase-access\");\r\n    const starting_money = await getStartingMoney(roomID);\r\n\r\n\r\n    const gameInfo = {\r\n        userId: userID,\r\n        nickname: nickname,\r\n        net_worth: starting_money,\r\n        money_left: starting_money,\r\n        curShares: empArray,\r\n    }\r\n\r\n    debug(\"checkpoint 7 firebase-access\");\r\n    userRef.set(gameInfo);\r\n    for(var i_day = 0; i_day < numDays; i_day++) {\r\n        await userRef.collection('investments').doc(toString(i_day)).set({\r\n            change: empArray,\r\n        });\r\n    }\r\n    debug(\"checkpoint 8 firebase-access\");\r\n\r\n    return userID;\r\n}\r\n\r\nexport const setUpRoom = (NumOfSymbols,Rounds,userID,password,startingMoney = 10000) => {\r\n    const roomRef = db.collection('Rooms').doc();\r\n    roomRef.set({\r\n        day_index: 0,\r\n        phase: 'no-host',\r\n        password: password,\r\n        starting_money: startingMoney,\r\n    });\r\n    const roomID = roomRef.id;\r\n    initSymbols(null,null,NumOfSymbols).then((symbolsL) => {\r\n        initDates(symbolsL,Rounds).then((datesD)=> {\r\n            roomRef.update({\r\n                symbols: symbolsL,\r\n                dates: datesD[\"dates\"],\r\n            });\r\n            initializeQuiz(symbolsL,roomID,datesD[\"period\"],datesD[\"dates\"]);\r\n\r\n        });\r\n    });\r\n    return roomID;\r\n}\r\n\r\nexport const getNumSymbols = async (roomID) => {\r\n    const roomData = await getRoomData(roomID);\r\n    return roomData.symbols.length;\r\n}\r\n\r\nexport const getCharts = async (roomID, dayIndex) => {\r\n    const numSymbols = await getNumSymbols(roomID);\r\n    var charts = {};\r\n    for(var i = 0; i < numSymbols; i++) {\r\n        charts[i] = await getChartUrls(roomID,await getSymbolNameFromIndex(roomID,i),dayIndex);\r\n    }\r\n    return charts;\r\n}\r\n\r\nexport const getChartUrls = async (roomID, symbol, dayIndex) => {\r\n    const endDate = getDateFromIndex(roomID, dayIndex);\r\n    let images = await db.collection('Rooms').doc(roomID).collection(symbol).doc('images').get();\r\n    let imagesData = images.data();\r\n    return [imagesData[\"Stockpublic_image_url\"][endDate],imagesData[\"ADXpublic_image_url\"][endDate],\r\n        imagesData[\"MACDpublic_image_url\"][endDate],imagesData['RSIpublic_image_url'][endDate]];\r\n}\r\n\r\nfunction randomDate(start, end) {\r\n    var date = new Date(+start + Math.random() * (end - start));\r\n    return date;\r\n}\r\n\r\n// Minimum Period is 1Month\r\nexport const initDates = async (symbols, Rounds) => {\r\n    let Stocks= await db.collection(\"Ticker-Info\").doc(\"Stock\").collection(\"Stocks\")\r\n        .where(\"Symbol\",\"in\",symbols).get()\r\n    let IPOyearMax = 0;\r\n    let today = new Date();\r\n    let year = today.getFullYear();\r\n    Stocks.forEach(function(Stock){\r\n        if (IPOyearMax < Stock.data().IPOyear){\r\n            IPOyearMax = Stock.data().IPOyear;\r\n        }\r\n    });\r\n\r\n    // No more than 7 rounds(Periods are measured in months)\r\n    let min_window_size = 3;\r\n    let yearDiff = year - (IPOyearMax+1);\r\n    let maximum_period = Math.floor(((yearDiff * 12)  - min_window_size) / Rounds);\r\n    let random_period =  Math.floor((Math.random()  * (maximum_period - min_window_size))+min_window_size);\r\n    let startDate = new Date(IPOyearMax+1,1,1);\r\n    let endDate =  new Date(IPOyearMax+1,1+random_period,1);\r\n    let rand_startDate =  randomDate(startDate,endDate);\r\n    let dates = [];\r\n    let curr_date = rand_startDate;\r\n    for(var i = 0; i < Rounds; i++) {\r\n        dates.push(curr_date.toISOString().substring(0, 10));\r\n        curr_date = new Date(curr_date.setMonth(curr_date.getMonth()+random_period));\r\n    }\r\n    const datesD ={\r\n        \"dates\" : dates,\r\n        \"period\": random_period\r\n    }\r\n    return datesD\r\n}\r\n\r\nexport const initSymbols = async(Industry,Sector,NumOfSymbols) =>{\r\n    let symbols = []\r\n    if(Sector !== null && Industry !== null){\r\n\r\n        let formData = new FormData();\r\n        formData.append('Industry',Industry);\r\n        formData.append('Sector',Sector)\r\n        formData.append('NumOfSymbols',NumOfSymbols)\r\n        try{\r\n            let response = await fetch('http://localhost:8080/get-symbols', {\r\n                method: 'POST',\r\n                mode: 'cors',\r\n                body: formData\r\n            })\r\n            let symbolJson = await response.json()\r\n            if (symbolJson.hasOwnProperty(\"Error\")){\r\n                console.log(\"No Symbols for your query\")\r\n                return symbols\r\n            }\r\n            symbols = symbolJson['symbols']\r\n        }\r\n        catch(error){\r\n            console.log(\"Error with Query: \" + error)\r\n        }\r\n\r\n    }\r\n    else if(Industry !== null){\r\n\r\n        let IndustryInfo =  await db.collection(\"Ticker-Info\").doc(\"Industry\").get();\r\n        let numOfIndustries= IndustryInfo.data().Industry[Industry];\r\n        let cutoff = Math.floor((Math.random()  * (numOfIndustries - NumOfSymbols))+NumOfSymbols);\r\n        let Industries = await db.collection(\"Ticker-Info\").doc(\"Stock\").collection(\"Stocks\")\r\n            .where(\"Industry\",\"==\",Industry)\r\n            .where(\"IndustryPos\",\"<=\", cutoff)\r\n            .orderBy(\"IndustryPos\").limit(NumOfSymbols).get()\r\n        Industries.forEach(function(doc){\r\n            symbols.push(doc.data().Symbol)\r\n        })\r\n\r\n    }\r\n    else if(Sector !== null){\r\n\r\n        let SectorInfo =  await db.collection(\"Ticker-Info\").doc(\"Sector\").get();\r\n        let numOfSectors= SectorInfo.data().Sector[Sector];\r\n        let cutoff = Math.floor((Math.random()  * (numOfSectors - NumOfSymbols))+NumOfSymbols);\r\n        let Sectors = await db.collection(\"Ticker-Info\").doc(\"Stock\").collection(\"Stocks\")\r\n            .where(\"Sector\",\"==\",Sector)\r\n            .where(\"SectorPos\",\"<=\", cutoff)\r\n            .orderBy(\"SectorPos\").limit(NumOfSymbols).get()\r\n        Sectors.forEach(function(doc){\r\n            symbols.push(doc.data().Symbol)\r\n        })\r\n\r\n    }\r\n    else{\r\n\r\n        let StockInfo =  await db.collection(\"Ticker-Info\").doc(\"Stock\").get();\r\n        let numOfStocks = StockInfo.data().NumOfStocks - 1;\r\n        let cutoff = Math.floor((Math.random()  * (numOfStocks - NumOfSymbols))+NumOfSymbols);\r\n        let Stocks = await db.collection(\"Ticker-Info\").doc(\"Stock\").collection(\"Stocks\")\r\n            .where(\"RandomPos\",\">=\", cutoff)\r\n            .orderBy(\"RandomPos\").limit(NumOfSymbols).get()\r\n        Stocks.forEach(function(Stock){\r\n            symbols.push(Stock.data().Symbol)\r\n        })\r\n\r\n    }\r\n    return symbols\r\n}\r\n\r\nexport const initializeQuiz = async (symbols, roomId, periodLen, endDates) => {\r\n    var formData = new FormData();\r\n    formData.append('symbol',JSON.stringify(symbols));\r\n    formData.append('RoomId',roomId);\r\n    formData.append('end-date',JSON.stringify(endDates));\r\n    try{\r\n        await fetch('http://localhost:8080/get-prices', {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            body: formData\r\n        })\r\n    }\r\n    catch(err) {\r\n        console.log(\"Error is \" +  err)\r\n    }\r\n    formData.append('periodLen',periodLen)\r\n    try{\r\n        await fetch('http://localhost:8080/get-stock-image', {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            body: formData\r\n        })\r\n    }\r\n    catch(error){\r\n        console.log(\"Error is \" +  error)\r\n    }\r\n}\r\n\r\nexport const getSymbols = async (roomID) =>{\r\n    const roomData = await getRoomData(roomID);\r\n    return roomData.symbols;\r\n}\r\n\r\nexport const getDayIndex = async (roomID) => {\r\n    const roomData = await getRoomData(roomID);\r\n    return roomData.day_index;\r\n}\r\n\r\n// returns current price for all symbols being tracked\r\nexport const getPrices = async (roomID, dayIndex) => {\r\n    const roomData = await getRoomData(roomID);\r\n    const symbolNamesArray = roomData.symbols;\r\n\r\n    var prices = [];\r\n\r\n    // save all current prices in an array\r\n    for (var index = 0; index < symbolNamesArray.length; index++) {\r\n        const currentName = symbolNamesArray[index];\r\n        const symbolPricesDoc = await db.collection('Rooms').doc(roomID).collection(currentName).doc('Prices').get();\r\n        const symbolPricesData = symbolPricesDoc.data();\r\n        const currentPrice = symbolPricesData.prices[dayIndex];\r\n        prices.push(currentPrice);\r\n    }\r\n\r\n    return prices;\r\n}\r\n\r\nexport const getUserData = async (roomID, userID) => {\r\n    await updateNetWorth(roomID,userID);\r\n    var userData;\r\n    const userRef = getUserRef(roomID,userID);\r\n    await userRef.get().then((doc) => {\r\n        userData = doc.data();\r\n    });\r\n    return userData;\r\n}\r\n\r\nexport const getUserRef = (roomID, userID) => {\r\n    return db.collection('Rooms').doc(roomID).collection('users').doc(userID);\r\n}\r\n\r\nexport const verifyOk = async (roomID, userID, dayIndex, changeArray, prices) => {\r\n\r\n    var consistentInvestment = true;\r\n    const userRef = getUserRef(roomID, userID);\r\n    const userData = await getUserData(roomID, userID);\r\n\r\n    var curArray = userData.curShares;\r\n    var sum = curArray.map(function(num,idx) {return num + changeArray[idx];});\r\n    consistentInvestment = consistentInvestment && sum.every((e) => e>=0);\r\n\r\n    //check cash ok\r\n    var totalMoney = userData.money_left;\r\n    var moneySpentArr = prices.map(function(price,idx) {totalMoney -= price * changeArray[idx];});\r\n    consistentInvestment = consistentInvestment && totalMoney >= 0;\r\n\r\n    return consistentInvestment;\r\n}\r\n\r\nexport const changeCash = async (roomID, userID, dayIndex, changeArray, prices) => {\r\n    const userRef = getUserRef(roomID, userID);\r\n    const userData = await getUserData(roomID,userID);\r\n    var totalMoney = userData.money_left;\r\n    prices.map(function(num,idx) {totalMoney -= num * changeArray[idx];});\r\n    userRef.update({money_left: totalMoney});\r\n}\r\n\r\nexport const changeShares = async (roomID, userID, dayIndex, changeArray) => {\r\n    const userRef = getUserRef(roomID, userID);\r\n    const investRef = userRef.collection('investments').doc(dayIndex);\r\n    const userData = await getUserData(roomID,userID);\r\n    //update curShares array\r\n    var curArray = userData.curShares;\r\n    var sum = curArray.map(function(num,idx) {return num + changeArray[idx];});\r\n    userRef.update({curShares: sum});\r\n\r\n    //update\r\n    //TODO: current have a separate call for investment. Consider accessing it through userData to save time\r\n    investRef.get().then(function(investDoc) {\r\n        if (investDoc.exists) {\r\n            var investData = investDoc.data();\r\n            var curArray = investData.change;\r\n            var sum = curArray.map(function(num,idx) {\r\n                return num + changeArray[idx];\r\n            });\r\n            investRef.update({\r\n                change: sum,\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport const makeInvestment = async (roomID, userID, dayIndex, changeArray) => {\r\n    const prices = await getPrices(roomID, dayIndex);\r\n\r\n    if (!(await verifyOk(roomID,userID,dayIndex,changeArray,prices))) return false;\r\n\r\n    changeCash(roomID,userID,dayIndex,changeArray,prices);\r\n    changeShares(roomID,userID,dayIndex,changeArray);\r\n\r\n    return true;\r\n}\r\n\r\nexport const getShares = async (roomID, userID) => {\r\n    const userData = await getUserData(roomID,userID);\r\n    return userData.currentShares;\r\n}\r\n\r\nexport const getCash = async (roomID, userID) => {\r\n    const userData = await getUserData(roomID,userID);\r\n    return userData.money_left;\r\n}\r\n\r\nexport const getRoomData = async (roomID) => {\r\n    var roomData;\r\n    await db.collection('Rooms').doc(roomID).get().then((doc) => {\r\n        roomData = doc.data();\r\n    });\r\n    return roomData;\r\n}\r\n\r\nexport const getRoomRef = (roomID) => {\r\n    return db.collection('Rooms').doc(roomID);\r\n}\r\n\r\nexport const getNetWorth = async (roomID, userID) => {\r\n    await updateNetWorth(roomID, userID);\r\n    const userData = await getUserData(roomID, userID);\r\n    return userData.net_worth;\r\n}\r\n\r\n//TODO: this method can be called many times, which leads to latency due to a lot of awaits. See if can pass userData from other methods\r\nexport const updateNetWorth = async (roomID, userID) => {\r\n    const dayIndex = await getDayIndex(roomID);\r\n    const prices = await getPrices(roomID, dayIndex);\r\n    const userData = await getUserData(roomID, userID);\r\n    const userRef = getUserRef(roomID, userID);\r\n    const curShares = userData.curShares;\r\n    var netWorth = userData.money_left;\r\n    curShares.map((numShares,idx) => {netWorth += numShares * prices[idx];});\r\n    if (userData.net_worth == netWorth) return;\r\n    await userRef.update({net_worth: netWorth});\r\n}\r\n\r\n// retrieves symbol name given the symbol's index\r\nexport const getSymbolNameFromIndex = async (roomID, symbolIndex) => {\r\n    const roomDoc = await db.collection('Rooms').doc(roomID).get();\r\n    const symbols = roomDoc.data().symbols;\r\n    return symbols[symbolIndex];\r\n}\r\n\r\nexport const getDateFromIndex = async (roomID, dayIndex) => {\r\n    const roomData = await getRoomData(roomID);\r\n    return roomData.dates[dayIndex];\r\n}","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {db, fire, auth, firestore} from '../../firebase.js';\r\nimport {setUpRoom} from '../firebase-access.jsx'\r\n\r\nfunction generateGameId() {\r\n    let id = '';\r\n    const possible = '0123456789';\r\n    for (let i=0; i<6; i++) {\r\n        id += possible.charAt(Math.floor(Math.random() * 10));\r\n    }\r\n    return id;\r\n}\r\n\r\nclass Create extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pagetype: 'not-created',\r\n            gameId: '',\r\n        }\r\n        this.createGameWrapper = this.createGameWrapper.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n    }\r\n\r\n    // createGameWrapper() {\r\n    //     console.log(\"create game called\");\r\n    //     const that = this;\r\n    //     //create game doc in firestore database\r\n    //     var _gameId = generateGameId();\r\n    //     this.setState({\r\n    //         gameId: _gameId,\r\n    //     });\r\n    //     var gameRef = db.collection(\"Rooms\").doc(_gameId);\r\n    //     gameRef.set({\r\n    //         created: Date.now(),\r\n    //         currentQuestion: 0,\r\n    //         phase: 'created',\r\n    //         gameId: _gameId,\r\n    //     })\r\n    //\r\n    //     //create subcollections for users\r\n    //     var questionsRef = gameRef.collection(\"questions\").doc(\"Test Q\").set({});\r\n    //     var usersRef = gameRef.collection(\"users\").doc(\"Test user\").set({});\r\n    //\r\n    //     //update props\r\n    //     this.setState({\r\n    //         pagetype: 'created',\r\n    //     });\r\n    // }\r\n\r\n    async createGameWrapper() {\r\n        var _gameId = await setUpRoom(2,3,null,'');\r\n        this.setState({\r\n            pagetype: 'created',\r\n            gameId: _gameId,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log('render called');\r\n        const {pagetype,gameId} = this.state;\r\n        console.log(pagetype);\r\n        console.log(gameId);\r\n        return (\r\n\r\n            <div className=\"app-page create-page\">\r\n                {pagetype === 'not-created' &&\r\n                    <button onClick={async () => await this.createGameWrapper()}> Create Game! </button>\r\n                }\r\n\r\n                {pagetype === 'created' && (\r\n                    <div>\r\n                        <span>Created game PIN: </span>\r\n                        {' '}\r\n                        <span className=\"dynamic-text\">{gameId}</span>\r\n                        {' '}\r\n                        <Link to=\"/host\">Copy this ID and use it host the game</Link>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Create;","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport {Quiz} from '../quiz/host/Quiz.js';\r\nimport {db,fire} from '../../firebase.js';\r\nimport {addUser,getUserData,getUserRef,getRoomData,getRoomRef} from '../firebase-access.jsx';\r\n\r\n/*\r\nPossible phases:\r\n- not-joined : display joining game\r\n- connection : players joining phase\r\n- question : displaying questions phase\r\n- between-question : display a page between questions\r\n- leaderboards : display the winners at the end\r\n- ended : the game has ended\r\n */\r\n\r\n/*\r\nGame structure:\r\n- phase: (see above)\r\n- starting_money: contains starting value for users\r\n- day_index: which date is used\r\n- password: password\r\n- symbols: array of symbols\r\n* User collection\r\n\r\n */\r\n\r\nclass Host extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            phase: 'not-joined',\r\n            questionNum: 0,\r\n            roomId: null,\r\n            password: '',\r\n            authenticated: 'no',\r\n            listening: 'no',\r\n            users: [],\r\n        }\r\n        this.userExists = this.userExists.bind(this);\r\n        this.updateUsers = this.updateUsers.bind(this);\r\n        this.joinGame = this.joinGame.bind(this);\r\n        this.updatePhase = this.updatePhase.bind(this);\r\n        this.initGameListener = this.initGameListener.bind(this);\r\n        this.restartGame = this.restartGame.bind(this);\r\n        this.quitGame = this.quitGame.bind(this);\r\n        this.endGame = this.endGame.bind(this);\r\n        this.debug = this.debug.bind(this);\r\n    }\r\n\r\n    debug(str) {\r\n        console.log(str);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {roomId} = this.state;\r\n    }\r\n\r\n    componentDidChange() {\r\n    }\r\n\r\n    handleChangeSelect = (event) => {\r\n        this.setState({[event.target.name]:event.target.value});\r\n    };\r\n\r\n    handleChange = name => (event) => {\r\n        this.setState({\r\n            [name]:event.target.value,\r\n        });\r\n    }\r\n\r\n    userExists(userId) {\r\n        const {users} = this.state;\r\n        var exists = false;\r\n        console.log(\"type of users: \" + typeof(users));\r\n        Array.from(users).forEach(function(item) {\r\n            console.log(\"item ID \" + item.userId);\r\n            console.log(\"checked user ID \" + userId);\r\n            if (item.userId == userId) {\r\n                console.log(\"they are equal\");\r\n                exists = true;\r\n            } else {\r\n                console.log(item.userId + \" and \" + userId + \" are not equal\");\r\n            }\r\n        });\r\n        return exists;\r\n    }\r\n\r\n    updatePhase(gameupdate) {\r\n        const {roomId} = this.state;\r\n        this.setState({\r\n            phase: gameupdate,\r\n        });\r\n        db.collection('Rooms').doc(roomId).update({\r\n            phase: gameupdate,\r\n        });\r\n    }\r\n\r\n    restartGame() {\r\n\r\n    }\r\n\r\n    quitGame() {\r\n        const {toggleHeader} = this.props;\r\n        this.updateGame({phase:null});\r\n    }\r\n\r\n    endGame(){\r\n        this.updateGame({phase:'final_result'});\r\n    }\r\n\r\n    // addDummyUser(nickname) {\r\n    //     const {gameId} = this.state;\r\n    //     const gameRef = db.collection('Rooms').doc(gameId);\r\n    //     const userRef = gameRef.collection('users').doc(nickname);\r\n    //\r\n    //     const gameInfo = {\r\n    //         nickname: nickname,\r\n    //         investments: [],\r\n    //         personal_value: -1,\r\n    //         money_left: -1,\r\n    //         gains: 0,\r\n    //         losses: 0,\r\n    //     }\r\n    //     userRef.set(gameInfo);\r\n    // }\r\n\r\n    updateUsers() {\r\n        const {password,roomId} = this.state;\r\n        const that = this;\r\n        var roomRef = db.collection('Rooms').doc(roomId);\r\n        roomRef.collection('users').get().then((snapshot) => {\r\n            snapshot.docs.forEach(user => {\r\n                var userData = user.data();\r\n                const userExistsBool = that.userExists(userData.userId);\r\n                console.log(\"userExistsBool value is \" + userExistsBool);\r\n                if (userExistsBool == false) {\r\n                    console.log(\"adding new user\");\r\n                    console.log(\"user id is \" + userData.userId);\r\n                    that.setState({\r\n                        users: that.state.users.concat([userData]),\r\n                    })\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    async joinGame() {\r\n        const {password,roomId} = this.state;\r\n        const that = this;\r\n        var roomRef = getRoomRef(roomId);\r\n        var roomData = await getRoomData(roomId);\r\n        if (roomData != null) {\r\n            console.log(roomData);\r\n            if (roomData.password === password && roomData.phase === 'no-host') {\r\n                that.setState({\r\n                    authenticated: 'yes',\r\n                    phase: 'connection',\r\n                });\r\n                that.debug(\"ckpoint 1 host\");\r\n                await addUser(roomId,\"dummy user\");\r\n                that.debug(\"ckpoint 2 host\");\r\n                await that.updateUsers();\r\n                that.debug(\"ckpoint 3 host\");\r\n                await that.initGameListener();\r\n                that.debug(\"ckpoint 4 host\");\r\n                roomRef.update({\r\n                    phase: 'connection',\r\n                });\r\n            } else {\r\n                console.log(\"wrong password\");\r\n            }\r\n        } else {\r\n            console.log(\"room \" + roomId + \" does not exist\");\r\n        }\r\n    }\r\n\r\n    initGameListener() {\r\n        const {roomId} = this.state;\r\n        var roomRef = db.collection('Rooms').doc(roomId);\r\n        const that = this;\r\n\r\n        roomRef.collection('users').onSnapshot(function(roomData) {\r\n            that.updateUsers();\r\n        });\r\n    }\r\n\r\n    startGame() {\r\n        const that = this;\r\n        that.updatePhase('question');\r\n    }\r\n\r\n    advanceQuestion() {\r\n        const {roomId} = this.state;\r\n        const that = this;\r\n        this.setState({\r\n            questionNum: that.state.questionNum + 1,\r\n        });\r\n        db.collection('Rooms').doc(roomId).update({\r\n            date_index: that.state.questionNum,\r\n        });\r\n    }\r\n\r\n    /*\r\n    Possible phases:\r\n    - not-joined : display joining game\r\n    - connection : players joining phase\r\n    - question : displaying questions phase\r\n    - between-question : display a page between questions\r\n    - leaderboards : display the winners at the end\r\n    - ended : the game has ended\r\n     */\r\n    render() {\r\n        const {roomId, password, phase, authenticated, users, questionNum} = this.state;\r\n        const gameFunctions = {\r\n            update: this.updateGame,\r\n            restart: this.restartGame,\r\n            end: this.endGame,\r\n            quit: this.quitGame,\r\n        }\r\n\r\n        if (authenticated === 'no') {\r\n            return (\r\n                <div className=\"page-container host-page\">\r\n                    <FormControl>\r\n                        <TextField label=\"Game PIN\" name=\"Game ID\" value={roomId}\r\n                                   onChange={this.handleChange('roomId')}/>\r\n                    </FormControl>\r\n                    <FormControl>\r\n                        <TextField label=\"Password\" type=\"password\" name=\"password\" value={password}\r\n                                   onChange={this.handleChange('password')}/>\r\n                    </FormControl>\r\n                    <Button onClick={() => this.joinGame()} variant=\"contained\">Host</Button>\r\n                </div>\r\n            )\r\n        } else if (authenticated === 'yes') {\r\n            if (phase === 'connection') {\r\n                return (\r\n                    <div className=\"page-container host-page\">\r\n                        <p> Users List </p>\r\n                        <ul id=\"user-list\">\r\n                            {users.map(user => (\r\n                                <li >{user.nickname}</li>\r\n                            ))\r\n                            }\r\n                        </ul>\r\n                        <button onClick={() => this.startGame()}>start stonks game</button>\r\n                    </div>\r\n                )\r\n            } else if (phase === 'question') {\r\n                return (\r\n                    <div className=\"page-container host-page\">\r\n                        <span>Current question: </span>\r\n                        {' '}\r\n                        <span className=\"dynamic-text\">{questionNum}</span>\r\n                        <p> Users List </p>\r\n                        <ul id=\"user-list\">\r\n                            {users.map(user => (\r\n                                <li key={user.id}>{user.nickname}</li>\r\n                            ))\r\n                            }\r\n                        </ul>\r\n                        <button onClick={() => this.advanceQuestion()}>next question</button>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n        // return (\r\n        //     <div className=\"page-container host-page\">\r\n        //         {game.gametype === 'quiz' && <Quiz game={game} gameFunc={gameFunctions}/>}\r\n        //     </div>\r\n        // );\r\n    }\r\n}\r\n\r\nexport default Host;","import React, { Component } from 'react';\r\n\r\nclass Quiz extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"host-container\">\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport {Quiz};","import React, { Component } from 'react';\r\n\r\nimport {firestore} from '../../../firebase';\r\nimport {getUserID} from '../../../firebase';\r\nimport {makeInvestment} from '../../firebase-access';\r\n\r\n\r\n/*\r\ninherited from Play:\r\n  - chart URLs\r\n  - roomID\r\n  - symbols array\r\n  - prices array\r\n  - dayIndex\r\n\r\nwhat Quiz does:\r\n  - retrieves and displays user information\r\n  - gets graph URLs from parent and displays\r\n  - HTML form to gather all input data\r\n  - submitHandlers for:\r\n    - buy (+ # of shares)\r\n    - sell (+ # of shares)\r\n  - create changeArray to record investment in firestore\r\n*/\r\n\r\n// const NUM_SYMBOLS = 2;\r\n// const DAY_INDEX = 0;\r\n// const ROOMID = 'f82Cnzhyhs54aRWKKVaA';\r\n// const USERID = '1K8yFtgBkrFr8FMd05YT';\r\n// const CHARTURL = 'something';\r\n//\r\n// const BUY = \"BUY\";\r\n// const SELL = \"SELL\";\r\n// const HOLD = \"HOLD\";\r\n\r\nclass Quiz extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            roomId: null,\r\n            password: '',\r\n            userId: '',\r\n            nickname: '',\r\n            numSymbols: 0,\r\n\r\n            //frequently updated properties\r\n            questionNum: 0,\r\n            chartUrls: null,\r\n            net_worth: 0,\r\n            money_left: 0,\r\n            curShares: [],\r\n            prices: [],\r\n            curBuyArray: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount () {\r\n        const numSymbols = this.props.numSymbols;\r\n        var empArray = new Array(this.props.numSymbols).fill(0);\r\n        this.setState({\r\n            numSymbols: this.props.numSymbols,\r\n            roomId: this.props.roomId,\r\n            userId: this.props.userId,\r\n            nickname: this.props.nickname,\r\n            questionNum: this.props.questionNum,\r\n            chartUrls: this.props.chartUrls,\r\n            net_worth: this.props.net_worth,\r\n            money_left: this.props.money_left,\r\n            curShares: this.props.curShares,\r\n            prices: this.props.prices,\r\n            curBuyArray: empArray,\r\n        });\r\n    }\r\n\r\n    static getDerivedStateFromProps(props,state) {\r\n        return {\r\n            questionNum: props.questionNum,\r\n            chartUrls: props.chartUrls,\r\n            net_worth: props.net_worth,\r\n            money_left: props.money_left,\r\n            curShares: props.curShares,\r\n            prices: props.prices,\r\n        }\r\n    }\r\n\r\n    // getSymbolData = () => {\r\n    //     let rows = [];\r\n    //\r\n    //     // get current price and user shares held for each of the symbols\r\n    //     // also present the BUY/HOLD/SELL options\r\n    //     for (let i = 0; i < NUM_SYMBOLS; i++) {\r\n    //         const currentPrice = this.getPrice(i);\r\n    //         const numShares = this.state.userShares[i];\r\n    //\r\n    //         const toRender = (\r\n    //             <div key={i}>\r\n    //                 <p>Symbol{i}:</p>\r\n    //                 <p>Current price is: {currentPrice}.</p>\r\n    //                 <p>You currently hold {numShares} share(s).</p>\r\n    //\r\n    //                 <button type=\"button\">BUY</button>\r\n    //                 <input type=\"number\" placeholder=\"10\" onChange={(event) => this.updateFormState(event, i, BUY)}/>\r\n    //\r\n    //                 <button type=\"button\" onClick={(event) => this.updateFormState(event, i, HOLD)}>HOLD</button>\r\n    //\r\n    //                 <button type=\"button\">SELL</button>\r\n    //                 <input type=\"number\" placeholder=\"10\" onChange={(event) => this.updateFormState(event, i, SELL)}/>\r\n    //                 <br/>\r\n    //             </div>\r\n    //         );\r\n    //         rows.push(toRender);\r\n    //         this.addRowToFormData(i);\r\n    //     }\r\n    //\r\n    //     return rows;\r\n    // }\r\n    //\r\n    // // update state variable to reflect number of shares\r\n    // updateFormState = (event, index, state) => {\r\n    //     var newState = {\r\n    //         BUY: null,\r\n    //         HOLD: null,\r\n    //         SELL: null\r\n    //     };\r\n    //\r\n    //     // handle different states\r\n    //     if (state === BUY) {\r\n    //         var numShares = event.target.value;\r\n    //\r\n    //         // value is deleted\r\n    //         if (!numShares) {\r\n    //             this.state.formInput[index][BUY] = null;\r\n    //             return;\r\n    //         }\r\n    //\r\n    //         newState[BUY] = Number(numShares);\r\n    //     }\r\n    //     else if (state === HOLD) {\r\n    //         newState[HOLD] = 1;  // indicate that user wants to Hold this investment with boolean flag\r\n    //     }\r\n    //     else if (state === SELL) {\r\n    //         var numShares = event.target.value;\r\n    //\r\n    //         // deletion\r\n    //         if (!numShares) {\r\n    //             this.state.formInput[index][SELL] = null;\r\n    //             return;\r\n    //         }\r\n    //\r\n    //         newState[SELL] = Number(numShares);\r\n    //     }\r\n    //     else {\r\n    //         throw \"An unexpected error occurred when trying to process the state\";\r\n    //     }\r\n    //\r\n    //     this.state.formInput[index] = newState;\r\n    // }\r\n\r\n    // parse form submission results and convert into a changeArray (for firestore)\r\n    // parseResults = () => {\r\n    //     var changeArray = [];\r\n    //     for (let i = 0; i < this.state.formInput.length; i++) {\r\n    //         const currentRow = this.state.formInput[i];\r\n    //\r\n    //         if (currentRow[BUY]) {\r\n    //             changeArray.push(currentRow[BUY]);\r\n    //         }\r\n    //         else if (currentRow[HOLD]) {\r\n    //             changeArray.push(0);  // invest 0 in symbol\r\n    //         }\r\n    //         else if (currentRow[SELL]) {\r\n    //             changeArray.push((currentRow[SELL] * -1));\r\n    //         }\r\n    //         else {\r\n    //             alert(\"Please enter an action for each symbol\");\r\n    //             break;\r\n    //         }\r\n    //     }\r\n    //\r\n    //     this.validate(changeArray);\r\n    //     makeInvestment(ROOMID, this.state.userID, DAY_INDEX, changeArray);\r\n    //     alert('investment recorded');\r\n    // }\r\n\r\n    //TODO make this implement buyArray instead of just buying one share of the first symbol\r\n    buy() {\r\n        const {roomId, userId, questionNum} = this.state;\r\n        var arr = new Array(this.props.numSymbols).fill(0);\r\n        arr[0] = 1;\r\n        makeInvestment(roomId,userId,questionNum,arr);\r\n    }\r\n\r\n    sell() {\r\n        const {roomId, userId, questionNum} = this.state;\r\n        var arr = new Array(this.props.numSymbols).fill(0);\r\n        arr[0] = -1;\r\n        makeInvestment(roomId,userId,questionNum,arr);\r\n    }\r\n\r\n    render() {\r\n        const {questionNum,chartUrls,net_worth,money_left,curShares,prices,curBuyArray,nickname,roomId} = this.state;\r\n        var imgUrls = chartUrls[0];\r\n        return (\r\n            <div>\r\n                <p>room id: {roomId}</p>\r\n                <p>nickname: {nickname}</p>\r\n                <p>question number: {questionNum}</p>\r\n                <p>chart:</p>\r\n                <img src={imgUrls[0]}/>\r\n                <p>net worth: {net_worth}</p>\r\n                <p>cash: {money_left}</p>\r\n                <p>current shares of symbol: {curShares[0]}</p>\r\n                <p>price of symbol: {prices[0]}</p>\r\n                <button onclick={() => this.buy()}>buy</button>\r\n                <button onclick={() => this.sell()}>sell</button>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport {Quiz};","import React, {Component,Fragment} from 'react';\r\nimport {db,fire} from '../../firebase.js';\r\nimport {Quiz} from '../quiz/play/Quiz.jsx';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport {addUser,getChartUrls,getSymbols,getDayIndex,getPrices,getUserData,getUserRef,makeInvestment,\r\ngetCash,getShares,getRoomData,getRoomRef,getNetWorth} from '../firebase-access.jsx';\r\nimport {Helmet} from 'react-helmet';\r\nimport {isRedirect} from \"@reach/router\";\r\n\r\nclass Play extends Component {\r\n\r\n    /*\r\n    Possible phases:\r\n    - not-joined : display joining game\r\n    - connection : players joining phase\r\n    - question : displaying questions phase\r\n    - between-question : display a page between questions\r\n    - leaderboards : display the winners at the end\r\n    - ended : the game has ended\r\n     */\r\n\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            //static properties\r\n            roomId: null,\r\n            password: '',\r\n            userId: '',\r\n            nickname: '',\r\n            numSymbols: 0,\r\n\r\n            //frequently updated properties\r\n            phase: 'not-joined',\r\n            questionNum: 0,\r\n            chartURLs: null,\r\n            net_worth: 0,\r\n            money_left: [],\r\n            curShares: [],\r\n            prices: [],\r\n        };\r\n        this.addUser = this.addUser.bind(this);\r\n        this.joinGame = this.joinGame.bind(this);\r\n        this.initGameListener = this.initGameListener.bind(this);\r\n        this.debug = this.debug.bind(this);\r\n    }\r\n\r\n    debug(str) {\r\n        console.log(str);\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    handleChangeSelect = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    };\r\n\r\n    handleChange = name => (event) => {\r\n        this.setState({\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n\r\n    ////frequently updated properties\r\n    //             phase: 'not-joined',\r\n    //             questionNum: 0,\r\n    //             chartURLs: [],\r\n    //             technicalIndicatorUrls: [],\r\n    //             netWorth: 0,\r\n    //             money_left: [],\r\n    //             curShares: [],\r\n    //             prices: [],\r\n    /*\r\n            phase: 'not-joined',\r\n            questionNum: 0,\r\n\r\n            chartURLs: [],\r\n\r\n            net_worth: 0,\r\n            money_left: [],\r\n            curShares: [],\r\n            prices: [],\r\n     */\r\n    async updatePortfolio() {\r\n        const {roomId,userId} = this.state;\r\n        var roomData = await getRoomData(roomId);\r\n        var userData = await getUserData(roomId,userId);\r\n        var chartUrls = await getChartUrls(roomId,roomData.day_index);\r\n        var prices = await getPrices(roomId,roomData.day_index);\r\n\r\n        this.setState({\r\n            questionNum: roomData.day_index,\r\n            chartUrls: chartUrls,\r\n            prices: prices,\r\n            net_worth: userData.net_worth,\r\n            money_left: userData.money_left,\r\n            curShares: userData.curShares,\r\n        });\r\n    }\r\n\r\n    async makeInvestmentWrapper(changeArray) {\r\n        const that = this;\r\n        await that.updatePortfolio();\r\n        const {roomId,userId,questionNum} = this.state;\r\n        var successful = await makeInvestment(roomId,userId,questionNum,changeArray);\r\n        if (successful) {\r\n            that.debug(\"make investment sucessful\");\r\n        }\r\n        else that.debug(\"make investment failed\");\r\n    }\r\n\r\n    async initGameListener() {\r\n        const that = this;\r\n        const {questionNum,roomId,phase,nickname,userId} = this.state;\r\n        const roomRef = db.collection('Rooms').doc(roomId);\r\n        const userRef = roomRef.collection('users').doc(userId);\r\n        roomRef.onSnapshot(async function(roomDoc) {\r\n            const roomData = roomDoc.data();\r\n            console.log(roomData);\r\n            if (questionNum != roomData.day_index || phase != roomData.phase) {\r\n                that.updatePortfolio();\r\n            }\r\n        });\r\n        userRef.onSnapshot(function(userDoc) {\r\n            that.updatePortfolio();\r\n        });\r\n    }\r\n\r\n    joinGame() {\r\n        const {roomId,password,nickname} = this.state;\r\n        const that = this;\r\n        const roomRef = db.collection('Rooms').doc(roomId);\r\n        roomRef.get().then(function(roomData) {\r\n            if (roomData.exists) {\r\n                var roomInfo = roomData.data();\r\n                if (roomInfo.password === password && roomInfo.phase === 'connection') {\r\n                    var uniqueUserId = that.addUser(nickname,roomInfo.starting_money);\r\n                    that.setState({\r\n                        phase: 'connection',\r\n                        userId: uniqueUserId,\r\n                        numSymbols: roomInfo.symbols.length,\r\n                        net_worth: roomInfo.starting_money,\r\n                        money_left: roomInfo.starting_money,\r\n                    });\r\n                    that.initGameListener();\r\n                    that.updatePortfolio();\r\n                } else if (roomInfo.password === password) {\r\n                    console.log(\"room not being hosted yet\");\r\n                } else if (roomInfo.phase === 'connection') {\r\n                    console.log(\"incorrect password\");\r\n                } else {\r\n                    console.log(\"room does not exist\");\r\n                }\r\n            } else {\r\n                console.log(\"room \" + roomId + \" does not exist\");\r\n            }\r\n        });\r\n    }\r\n\r\n    render () {\r\n        const {phase,password,nickname,playerKey,questionNum,roomId,isRedirected} = this.state;\r\n        console.log(questionNum);\r\n        if (phase === 'not-joined') {\r\n            return (\r\n                <div className=\"page-container play-page\">\r\n                    <div>\r\n                        <FormControl>\r\n                            <TextField label=\"Nickname\" name=\"nickname\" value={nickname}\r\n                                       onChange={this.handleChange('nickname')}/>\r\n                        </FormControl>\r\n                        <FormControl>\r\n                            <TextField label=\"Game PIN\" name=\"Game ID\" value={roomId} onChange={this.handleChange('roomId')}/>\r\n                        </FormControl>\r\n                        <FormControl>\r\n                            <TextField label=\"Password\" type=\"password\" name=\"password\" value={password}\r\n                                       onChange={this.handleChange('password')}/>\r\n                        </FormControl>\r\n                        <Button onClick={() => this.joinGame()} variant=\"contained\">Join</Button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else if (phase === 'connection') {\r\n            return (\r\n                <div>\r\n                    <p> Connected. Please wait for host to start game. </p>\r\n                </div>\r\n            )\r\n        } else if (phase === 'question') {\r\n            return (\r\n                <div>\r\n                    <Quiz {...this.state}></Quiz>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Play;","import React, { Component, createContext } from \"react\";\r\nimport { auth } from \"../../../firebase\";\r\n\r\nexport const UserContext = createContext({ user: null });\r\nclass UserProvider extends Component {\r\n  state = {\r\n    user: null\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    auth.onAuthStateChanged(userAuth => {\r\n      this.setState({user: userAuth});\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <UserContext.Provider value={this.state.user}>\r\n        {this.props.children}\r\n      </UserContext.Provider>\r\n    );\r\n  }\r\n}\r\nexport default UserProvider;","import React, {Component,Fragment} from 'react';\r\nimport {Helmet} from 'react-helmet';\r\nimport {Link, withRouter} from 'react-router-dom';\r\n\r\nimport UserProvider from \"../authenticate/providers/UserProvider\";\r\nimport { UserContext } from \"../authenticate/providers/UserProvider\";\r\n\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={};\r\n    }\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Helmet><title> toohak stonks quizzes </title></Helmet>\r\n                <div id=\"home\">\r\n                    <section>\r\n                        <div></div>\r\n                        <h1>toohak app</h1>\r\n                        <div className=\"play-button-container\">\r\n                            <ul>\r\n                                <li><Link to=\"/play\">Play</Link></li>\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"host-button-container\">\r\n                            <p><Link to=\"/host\">Host a room</Link></p>\r\n                        </div>\r\n                        <div className=\"create-button-container\">\r\n                            <p><Link to=\"/create\">Create a room</Link></p>\r\n                        </div>\r\n                        <div className=\"auth-container\">\r\n                            <Link to=\"/auth/signIn\">Login</Link>\r\n                            <Link to=\"/auth/signUp\">Signup</Link>\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React, {Fragment, Component} from 'react';\r\nimport {Helmet} from 'react-helmet';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\nimport Create from './Components/pages/Create'\r\nimport Host from './Components/pages/Host'\r\nimport Play from './Components/pages/Play'\r\nimport Home from './Components/pages/Home'\r\n\r\nimport UserProvider from './Components/authenticate/providers/UserProvider.jsx';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={};\r\n  }\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <div id=\"content\">\r\n            <Route exact path=\"/play\" render={() => <Play />} />\r\n            <Route exact path=\"/host\" render={() => <Host />} />\r\n            <Route exact path=\"/create\" render={() => <Create />} />\r\n            <Route exact path=\"/\" render={() => <Home />} />\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}