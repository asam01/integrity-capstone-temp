{"version":3,"sources":["firebase.js","Components/pages/Create.jsx","Components/quiz/host/Quiz.js","Components/pages/Host.jsx","Components/quiz/play/Quiz.jsx","Components/pages/Play.jsx","Components/authenticate/providers/UserProvider.jsx","Components/pages/Home.jsx","Components/Game.jsx","App.jsx","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","firestore","GoogleAuthProvider","Create","props","state","pagetype","gameId","createGame","bind","_gameId","id","i","charAt","Math","floor","random","generateGameId","this","setState","gameRef","collection","doc","set","created","Date","now","currentQuestion","phase","console","log","className","onclick","to","Component","Quiz","Host","handleChangeSelect","event","target","name","value","handleChange","game","gametype","localStorage","getItem","password","isRedirected","updateGame","initGameListener","restartGame","quitGame","endGame","gameupdate","database","ref","update","toggleHeader","that","callback","orderByChild","equalTo","once","fetchGame","snapshot","val","forEach","child","gameParameter","on","gameFunctions","restart","end","quit","gameFunc","FormControl","TextField","label","onChange","type","Button","onClick","joinGame","variant","saveAnswer","answer","currentQuestionId","quiz","questions","key","playerKey","error","Play","recentGameId","chartURLs","technicalIndicators","currentCash","currentShares","currentPrice","createPlayer","changeInShares","playerId","player","playerRef","push","newPlayer","Object","assign","setItem","recentGame","UserContext","createContext","user","Home","Helmet","Game","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c5a5d293.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyArVyBRB-XMiStAmjP5mCV2v2PmScbEpi8\",\n  authDomain: \"integrity-step-capstone.firebaseapp.com\",\n  databaseURL: \"https://integrity-step-capstone.firebaseio.com\",\n  projectId: \"integrity-step-capstone\",\n  storageBucket: \"integrity-step-capstone.appspot.com\",\n  messagingSenderId: \"359578935158\",\n  appId: \"1:359578935158:web:89d46122b0609b4a95a457\",\n  measurementId: \"G-GMNRGZQ858\"\n};\n\nconst fire = firebase.initializeApp(firebaseConfig);\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\nconst db = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nconst signInWithGoogle = () => {\n  auth.signInWithPopup(provider);\n};\n\nexport {db, fire, auth, firestore, signInWithGoogle};","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport {db, fire, auth, firestore} from '../../firebase.js';\n\nfunction generateGameId() {\n    let id = '';\n    const possible = '0123456789';\n    for (let i=0; i<6; i++) {\n        id += possible.charAt(Math.floor(Math.random() * 10));\n    }\n    return id;\n}\n\nclass Create extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pagetype: 'not-created',\n            gameId: '',\n        }\n        this.createGame = this.createGame.bind(this);\n    }\n    \n    componentDidMount() {\n    }\n\n    createGame() {\n        const that = this;\n        //create game doc in firestore database\n        var _gameId = generateGameId();\n        this.setState({\n            gameId: _gameId,\n        });\n        var gameRef = db.collection(\"Rooms\").doc(_gameId);\n        gameRef.set({\n            created: Date.now(),\n            currentQuestion: 0,\n            phase: 'created',\n            gameId: _gameId,\n        })\n\n        //create subcollections for users\n        var questionsRef = gameRef.collection(\"questions\").doc(\"Test Q\").set({});\n        var usersRef = gameRef.collection(\"users\").doc(\"Test user\").set({});\n\n        //update props\n        this.setState({\n            pagetype: 'created',\n        });\n    }\n\n    render() {\n        console.log('render called');\n        const {pagetype,gameId} = this.state;\n        console.log(pagetype);\n        console.log(gameId);\n        return (\n\n            <div className=\"app-page create-page\">\n                {pagetype === 'not-created' &&\n                    <button onclick={() => this.createGame()}> Create Game! </button>\n                }\n\n                {pagetype === 'created' && (\n                    <div>\n                        <span>Created game PIN: </span>\n                        {' '}\n                        <span className=\"dynamic-text\">{gameId}</span>\n                        <Link to=\"/host\">Copy this ID and use it host the game</Link>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default Create;","import React, { Component } from 'react';\n\nclass Quiz extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"host-container\">\n\n            </div>\n        );\n    }\n}\n\nexport {Quiz};","import React, { Component } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport {Quiz} from '../quiz/host/Quiz.js';\nimport { fire} from '../../firebase.js';\n\nfunction fetchGame(gameId, callback) {\n    return fire.database().ref('/Rooms').orderByChild('gameId').equalTo(gameId).once('value',callback);\n}\n\nclass Host extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            game: {},\n            gametype: 'other',\n            gameId: localStorage.getItem('RecentGameId') || '',\n            password: '',\n            isRedirected: Date.now() - localStorage.getItem('lastTimestamp') < 2000,\n        }\n        this.updateGame = this.updateGame.bind(this);\n        this.initGameListener = this.initGameListener.bind(this);\n        this.restartGame = this.restartGame.bind(this);\n        this.quitGame = this.quitGame.bind(this);\n        this.endGame = this.endGame.bind(this);\n    }\n\n    componentDidMount() {\n        const {gameId} = this.state;\n    }\n\n    handleChangeSelect = (event) => {\n        this.setState({[event.target.name]:event.target.value});\n    };\n\n    handleChange = name => (event) => {\n        this.setState({\n            [name]:event.target.value,\n        });\n    }\n\n    updateGame(gameupdate) {\n        const {game} = this.state;\n        fire.database().ref('Rooms/${game.key}').update(gameupdate);\n    }\n\n    restartGame() {\n        const game = {};\n        game.players = [];\n        game.phase = 'setup';\n        this.updateGame(game);\n    }\n\n    quitGame() {\n        const {toggleHeader} = this.props;\n        this.updateGame({phase:null});\n    }\n\n    endGame(){\n        this.updateGame({phase:'final_result'});\n    }\n\n    joinGame(gameId) {\n        const {password,gametype} = this.state;\n        const that = this;\n        fetchGame(gameId, (snapshot) => {\n            if (snapshot.val()) {\n                var game;\n                snapshot.forEach((child) => {\n                    game = child.val();\n                });\n                if (game.password === password) {\n                    that.initGameListener(game);\n                } else {\n                    //no matching game\n                }\n            } else {\n                //no games\n            }\n        });\n    }\n\n    initGameListener(gameParameter) {\n        var gameRef;\n        gameRef = fire.database().ref('Rooms/$(gameParameter.key}');\n        const that = this;\n        gameRef.on('value',(snapshot) => {\n            const game = snapshot.val();\n            if (!game.phase) {\n                game.phase = 'setup';\n            }\n            if (game) {\n                that.setState({\n                    game,\n                });\n            } else {\n                that.setState({\n                    game: '',\n                });\n            }\n        });\n    }\n\n    render() {\n        const {game, gameId, password, isRedirected, gametype} = this.state;\n        const gameFunctions = {\n            update: this.updateGame,\n            restart: this.restartGame,\n            end: this.endGame,\n            quit: this.quitGame,\n        }\n\n        if (!game.phase) {\n            return (\n                <div className=\"page-container host-page\">\n                    <FormControl>\n                        <TextField label=\"Game PIN\" name=\"Game ID\" value={gameId} onChange={this.handleChange('gameId')}/>\n                    </FormControl>\n                    <FormControl>\n                        <TextField label=\"Password\" type=\"password\" name=\"password\" value={password} onChange={this.handleChange('password')}/>\n                    </FormControl>\n                    <Button onClick={() => this.joinGame(gameId)} variant=\"contained\">Host</Button>\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"page-container host-page\">\n                {game.gametype === 'quiz' && <Quiz game={game} gameFunc={gameFunctions}/>}\n            </div>\n        );\n    }\n}\n\nexport default Host;","import React, { Component } from 'react';\nimport {fire} from '../../../firebase.js';\n\n\nclass Quiz extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.saveAnswer = this.saveAnswer.bind(this);\n    }\n\n    saveAnswer(answer) {\n        let that = this;\n        let currentQuestionId = this.props.game.quiz.questions[this.props.game.quiz.currentQuestion].id;\n        fire.database().ref('/Rooms/' + that.props.game.key + '/players/' + this.props.playerKey + '/answers/' + currentQuestionId).set(answer, function(error) {\n            var x = 1+1;\n        }\n        );\n    }\n\n    render() {\n        return (\n            <div></div>\n        );\n    }\n};\n\nexport {Quiz};","import React, {Component,Fragment} from 'react';\nimport {fire} from '../../firebase.js';\nimport {Quiz} from '../quiz/play/Quiz.jsx';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport {Helmet} from 'react-helmet';\nimport {isRedirect} from \"@reach/router\";\n\nfunction fetchGame(gameId,callback) {\n    fire.database().ref('/Rooms').orderByChild('gameId').equalTo(gameId).once('value',callback);\n}\n\nclass Play extends Component {\n\n    constructor (props) {\n        super(props);\n        this.state = {\n            game: {},\n            gameId: '',\n            gametype: 'other',\n            recentGameId: localStorage.getItem('RecentGameIdPlay') || '',\n            playerKey: '',\n            chartURLs: null,\n            technicalIndicators: null,\n            currentCash: null,\n            currentShares: null,\n            currentPrice: null,\n        };\n        this.createPlayer = this.createPlayer.bind(this);\n        this.joinGame = this.joinGame.bind(this);\n    }\n\n    componentDidMount() {\n        const {recentGameId} = this.state;\n        if (recentGameId) {\n            fetchGame('default',recentGameId, (snapshot) => {\n                if (snapshot.val()) {\n                    var game;\n                    snapshot.forEach((child) => {\n                        game = child.val();\n                    });\n                    if (game.status === 'in_progress') {\n                        this.setState({recentGame:game});\n                    }\n                }\n            })\n        }\n    }\n\n    handleChangeSelect = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    handleChange = name => (event) => {\n        this.setState({\n            [name]: event.target.value,\n        });\n    };\n\n    updateShares(changeInShares,playerId) {\n        var current\n    }\n\n    joinGame(gameId) {\n        const {gametype} = this.state;\n        const that = this;\n        fetchGame(gametype, gameId, (snapshot) => {\n            if (snapshot.val()) {\n                var game;\n                snapshot.forEach((child) => {\n                    game = child.val();\n                });\n                if (game.phase === 'connection') {\n                    const storedPlayerKey = localStorage.getItem('RecentPlayerKey');\n                    if (storedPlayerKey && game.players && game.players[storedPlayerKey]) {\n                        that.setState({playerKey: storedPlayerKey});\n                    }\n                    that.initGameListener(game);\n                } else if (game.phase === 'setup') {\n                    //game not started\n                } else {\n                    const storedPlayerKey = localStorage.getItem('RecentPlayerKey');\n                    if (storedPlayerKey && game.players && game.players[storedPlayerKey]) {\n                        that.setState({playerkey: storedPlayerKey});\n                        localStorage.setItem('RecentGameIdPlay',game.gameId);\n                        that.initGameListener(game);\n                    } else {\n                        //game in progress\n                    }\n                }\n            } else {\n                //no game found\n            }\n        });\n    }\n\n    initGameListener(gameParameter) {\n        var gameRef;\n        gameRef = fire.database().ref('/Rooms/$(gameParameter.key)');\n        const that = this;\n        gameRef.on('value', (snapshot) => {\n            const game = snapshot.val();\n            if (game) {\n                that.setState({\n                    game,\n                });\n            } else {\n                that.setState({\n                    game: '',\n                })\n            }\n        });\n    }\n\n    createPlayer(player) {\n        const {game} = this.state;\n        var playerRef;\n        playerRef = fire.database().ref('/Rooms/$(game.key}/players').push();\n        const newPlayer = Object.assign({key:playerRef.key},player);\n        const that = this;\n        playerRef.set(newPlayer, (error) => {\n            if (error) {\n                //handle error\n            } else {\n                that.setState({\n                    playerKey: newPlayer.key,\n                });\n                localStorage.setItem('RecentPlayerKey',newPlayer.key);\n            }\n        });\n    }\n\n    render () {\n        const {game,playerKey,gameId,recentGameId,recentGame,isRedirected,gametype} = this.state;\n        if (!game.phase) {\n            return (\n                <div className=\"page-container play-page\">\n                    <div>\n                        <FormControl>\n                            <TextField label=\"Game PIN\" name=\"Game ID\" value={gameId} onChange={this.handleChange('gameId')}/>\n                        </FormControl>\n                        <Button onClick={() => this.joinGame(gameId)} variant=\"contained\">Join</Button>\n                    </div>\n                </div>\n            )\n        }\n        return (\n            <div className=\"page-container play-page\">\n                {game.gametype === 'quiz' && <Quiz game={game} createPlayer={this.createPlayer} playerKey={playerKey}/>}\n            </div>\n        );\n    }\n}\n\nexport default Play;","import React, { Component, createContext } from \"react\";\nimport { auth } from \"../../../firebase\";\n\nexport const UserContext = createContext({ user: null });\nclass UserProvider extends Component {\n  state = {\n    user: null\n  };\n\n  componentDidMount = () => {\n    auth.onAuthStateChanged(userAuth => {\n      this.setState({ user: userAuth});\n    });\n  };\n  render() {\n    return (\n      <UserContext.Provider value={this.state.user}>\n        {this.props.children}\n      </UserContext.Provider>\n    );\n  }\n}\nexport default UserProvider;","import React, {Component,Fragment} from 'react';\nimport {Helmet} from 'react-helmet';\nimport {Link, withRouter} from 'react-router-dom';\n\nimport UserProvider from \"../authenticate/providers/UserProvider\";\nimport { UserContext } from \"../authenticate/providers/UserProvider\";\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state={};\n    }\n    render() {\n        return (\n            <Fragment>\n                <Helmet><title> toohak stonks quizzes </title></Helmet>\n                <div id=\"home\">\n                    <section>\n                        <div></div>\n                        <h1>toohak app</h1>\n                        <div className=\"play-button-container\">\n                            <ul>\n                                <li><Link to=\"/play\">Play</Link></li>\n                            </ul>\n                        </div>\n                        <div className=\"host-button-container\">\n                            <p><Link to=\"/host\">Host a room</Link></p>\n                        </div>\n                        <div className=\"create-button-container\">\n                            <p><Link to=\"/create\">Create a room</Link></p>\n                        </div>\n                        <div className=\"auth-container\">\n                            <Link to=\"/auth/signIn\">Login</Link>\n                            <Link to=\"/auth/signUp\">Signup</Link>\n                        </div>\n                    </section>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default Home;","import React, {Fragment} from 'react';\nimport {Helmet} from 'react-helmet';\n//import logo from './logo.svg';\n//import './App.css';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\n\nimport Home from './pages/Home';\nimport GameLobby from './pages/Lobby.jsx';\nimport Play from './pages/Play.jsx';\nimport SignIn from \"./authenticate/SignIn\";\nimport SignUp from \"./authenticate/SignUp\";\n\nfunction Game() {\n  return (\n    <Router>\n      <Route path = \"/\" exact component={Home}/>\n      <Route path = \"/play/lobby\" exact component={GameLobby}/>\n      <Route path = \"/play/game\" exact component={Play}/>\n      <Route path = \"/auth/signIn\" exact component={SignIn}/>\n      <Route path = \"/auth/signUp\" exact component={SignUp}/>\n    </Router>\n  );\n}\n\nexport default Game;","import React, {Fragment, Component} from 'react';\nimport {Helmet} from 'react-helmet';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Create from './Components/pages/Create'\nimport Host from './Components/pages/Host'\nimport Play from './Components/pages/Play'\nimport Home from './Components/pages/Home'\n\nimport UserProvider from \"./Components/authenticate/providers/UserProvider\";\nimport Game from \"./Components/Game\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state={};\n  }\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div id=\"content\">\n            <Route exact path=\"/play\" render={() => <Play />} />\n            <Route exact path=\"/host\" render={() => <Host />} />\n            <Route exact path=\"/create\" render={() => <Create />} />\n            <Route exact path=\"/\" render={() => <Home />} />\n          </div>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\n//import './styles/styles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}